// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: instruments.proto

package investpb

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//Тип купонов.
type CouponType int32

const (
	CouponType_COUPON_TYPE_UNSPECIFIED CouponType = 0 //Неопределенное значение
	CouponType_COUPON_TYPE_CONSTANT    CouponType = 1 //Постоянный
	CouponType_COUPON_TYPE_FLOATING    CouponType = 2 //Плавающий
	CouponType_COUPON_TYPE_DISCOUNT    CouponType = 3 //Дисконт
	CouponType_COUPON_TYPE_MORTGAGE    CouponType = 4 //Ипотечный
	CouponType_COUPON_TYPE_FIX         CouponType = 5 //Фиксированный
	CouponType_COUPON_TYPE_VARIABLE    CouponType = 6 //Переменный
	CouponType_COUPON_TYPE_OTHER       CouponType = 7 //Прочее
)

// Enum value maps for CouponType.
var (
	CouponType_name = map[int32]string{
		0: "COUPON_TYPE_UNSPECIFIED",
		1: "COUPON_TYPE_CONSTANT",
		2: "COUPON_TYPE_FLOATING",
		3: "COUPON_TYPE_DISCOUNT",
		4: "COUPON_TYPE_MORTGAGE",
		5: "COUPON_TYPE_FIX",
		6: "COUPON_TYPE_VARIABLE",
		7: "COUPON_TYPE_OTHER",
	}
	CouponType_value = map[string]int32{
		"COUPON_TYPE_UNSPECIFIED": 0,
		"COUPON_TYPE_CONSTANT":    1,
		"COUPON_TYPE_FLOATING":    2,
		"COUPON_TYPE_DISCOUNT":    3,
		"COUPON_TYPE_MORTGAGE":    4,
		"COUPON_TYPE_FIX":         5,
		"COUPON_TYPE_VARIABLE":    6,
		"COUPON_TYPE_OTHER":       7,
	}
)

func (x CouponType) Enum() *CouponType {
	p := new(CouponType)
	*p = x
	return p
}

func (x CouponType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouponType) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[0].Descriptor()
}

func (CouponType) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[0]
}

func (x CouponType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouponType.Descriptor instead.
func (CouponType) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{0}
}

//Тип идентификатора инструмента. Подробнее об идентификации инструментов: [Идентификация инструментов](https://tinkoff.github.io/investAPI/faq_identification/)
type InstrumentIdType int32

const (
	InstrumentIdType_INSTRUMENT_ID_UNSPECIFIED InstrumentIdType = 0 //Значение не определено.
	InstrumentIdType_INSTRUMENT_ID_TYPE_FIGI   InstrumentIdType = 1 //Figi.
	InstrumentIdType_INSTRUMENT_ID_TYPE_TICKER InstrumentIdType = 2 //Ticker.
	InstrumentIdType_INSTRUMENT_ID_TYPE_UID    InstrumentIdType = 3 //Уникальный идентификатор.
)

// Enum value maps for InstrumentIdType.
var (
	InstrumentIdType_name = map[int32]string{
		0: "INSTRUMENT_ID_UNSPECIFIED",
		1: "INSTRUMENT_ID_TYPE_FIGI",
		2: "INSTRUMENT_ID_TYPE_TICKER",
		3: "INSTRUMENT_ID_TYPE_UID",
	}
	InstrumentIdType_value = map[string]int32{
		"INSTRUMENT_ID_UNSPECIFIED": 0,
		"INSTRUMENT_ID_TYPE_FIGI":   1,
		"INSTRUMENT_ID_TYPE_TICKER": 2,
		"INSTRUMENT_ID_TYPE_UID":    3,
	}
)

func (x InstrumentIdType) Enum() *InstrumentIdType {
	p := new(InstrumentIdType)
	*p = x
	return p
}

func (x InstrumentIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[1].Descriptor()
}

func (InstrumentIdType) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[1]
}

func (x InstrumentIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentIdType.Descriptor instead.
func (InstrumentIdType) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{1}
}

//Статус запрашиваемых инструментов.
type InstrumentStatus int32

const (
	InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED InstrumentStatus = 0 //Значение не определено.
	InstrumentStatus_INSTRUMENT_STATUS_BASE        InstrumentStatus = 1 //Базовый список инструментов (по умолчанию). Инструменты доступные для торговли через TINKOFF INVEST API.
	InstrumentStatus_INSTRUMENT_STATUS_ALL         InstrumentStatus = 2 //Список всех инструментов.
)

// Enum value maps for InstrumentStatus.
var (
	InstrumentStatus_name = map[int32]string{
		0: "INSTRUMENT_STATUS_UNSPECIFIED",
		1: "INSTRUMENT_STATUS_BASE",
		2: "INSTRUMENT_STATUS_ALL",
	}
	InstrumentStatus_value = map[string]int32{
		"INSTRUMENT_STATUS_UNSPECIFIED": 0,
		"INSTRUMENT_STATUS_BASE":        1,
		"INSTRUMENT_STATUS_ALL":         2,
	}
)

func (x InstrumentStatus) Enum() *InstrumentStatus {
	p := new(InstrumentStatus)
	*p = x
	return p
}

func (x InstrumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[2].Descriptor()
}

func (InstrumentStatus) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[2]
}

func (x InstrumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentStatus.Descriptor instead.
func (InstrumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{2}
}

//Тип акций.
type ShareType int32

const (
	ShareType_SHARE_TYPE_UNSPECIFIED     ShareType = 0 //Значение не определено.
	ShareType_SHARE_TYPE_COMMON          ShareType = 1 //Обыкновенная
	ShareType_SHARE_TYPE_PREFERRED       ShareType = 2 //Привилегированная
	ShareType_SHARE_TYPE_ADR             ShareType = 3 //Американские депозитарные расписки
	ShareType_SHARE_TYPE_GDR             ShareType = 4 //Глобальные депозитарные расписки
	ShareType_SHARE_TYPE_MLP             ShareType = 5 //Товарищество с ограниченной ответственностью
	ShareType_SHARE_TYPE_NY_REG_SHRS     ShareType = 6 //Акции из реестра Нью-Йорка
	ShareType_SHARE_TYPE_CLOSED_END_FUND ShareType = 7 //Закрытый инвестиционный фонд
	ShareType_SHARE_TYPE_REIT            ShareType = 8 //Траст недвижимости
)

// Enum value maps for ShareType.
var (
	ShareType_name = map[int32]string{
		0: "SHARE_TYPE_UNSPECIFIED",
		1: "SHARE_TYPE_COMMON",
		2: "SHARE_TYPE_PREFERRED",
		3: "SHARE_TYPE_ADR",
		4: "SHARE_TYPE_GDR",
		5: "SHARE_TYPE_MLP",
		6: "SHARE_TYPE_NY_REG_SHRS",
		7: "SHARE_TYPE_CLOSED_END_FUND",
		8: "SHARE_TYPE_REIT",
	}
	ShareType_value = map[string]int32{
		"SHARE_TYPE_UNSPECIFIED":     0,
		"SHARE_TYPE_COMMON":          1,
		"SHARE_TYPE_PREFERRED":       2,
		"SHARE_TYPE_ADR":             3,
		"SHARE_TYPE_GDR":             4,
		"SHARE_TYPE_MLP":             5,
		"SHARE_TYPE_NY_REG_SHRS":     6,
		"SHARE_TYPE_CLOSED_END_FUND": 7,
		"SHARE_TYPE_REIT":            8,
	}
)

func (x ShareType) Enum() *ShareType {
	p := new(ShareType)
	*p = x
	return p
}

func (x ShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[3].Descriptor()
}

func (ShareType) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[3]
}

func (x ShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareType.Descriptor instead.
func (ShareType) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{3}
}

//Тип актива.
type AssetType int32

const (
	AssetType_ASSET_TYPE_UNSPECIFIED AssetType = 0 //Тип не определён.
	AssetType_ASSET_TYPE_CURRENCY    AssetType = 1 //Валюта.
	AssetType_ASSET_TYPE_COMMODITY   AssetType = 2 //Товар.
	AssetType_ASSET_TYPE_INDEX       AssetType = 3 //Индекс.
	AssetType_ASSET_TYPE_SECURITY    AssetType = 4 //Ценная бумага.
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "ASSET_TYPE_UNSPECIFIED",
		1: "ASSET_TYPE_CURRENCY",
		2: "ASSET_TYPE_COMMODITY",
		3: "ASSET_TYPE_INDEX",
		4: "ASSET_TYPE_SECURITY",
	}
	AssetType_value = map[string]int32{
		"ASSET_TYPE_UNSPECIFIED": 0,
		"ASSET_TYPE_CURRENCY":    1,
		"ASSET_TYPE_COMMODITY":   2,
		"ASSET_TYPE_INDEX":       3,
		"ASSET_TYPE_SECURITY":    4,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[4].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[4]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{4}
}

//Тип структурной ноты.
type StructuredProductType int32

const (
	StructuredProductType_SP_TYPE_UNSPECIFIED     StructuredProductType = 0 //Тип не определён.
	StructuredProductType_SP_TYPE_DELIVERABLE     StructuredProductType = 1 //Поставочный.
	StructuredProductType_SP_TYPE_NON_DELIVERABLE StructuredProductType = 2 //Беспоставочный.
)

// Enum value maps for StructuredProductType.
var (
	StructuredProductType_name = map[int32]string{
		0: "SP_TYPE_UNSPECIFIED",
		1: "SP_TYPE_DELIVERABLE",
		2: "SP_TYPE_NON_DELIVERABLE",
	}
	StructuredProductType_value = map[string]int32{
		"SP_TYPE_UNSPECIFIED":     0,
		"SP_TYPE_DELIVERABLE":     1,
		"SP_TYPE_NON_DELIVERABLE": 2,
	}
)

func (x StructuredProductType) Enum() *StructuredProductType {
	p := new(StructuredProductType)
	*p = x
	return p
}

func (x StructuredProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructuredProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[5].Descriptor()
}

func (StructuredProductType) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[5]
}

func (x StructuredProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructuredProductType.Descriptor instead.
func (StructuredProductType) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{5}
}

//Тип действия со списком избранных инструментов.
type EditFavoritesActionType int32

const (
	EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED EditFavoritesActionType = 0 //Тип не определён.
	EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_ADD         EditFavoritesActionType = 1 //Добавить в список.
	EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_DEL         EditFavoritesActionType = 2 //Удалить из списка.
)

// Enum value maps for EditFavoritesActionType.
var (
	EditFavoritesActionType_name = map[int32]string{
		0: "EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED",
		1: "EDIT_FAVORITES_ACTION_TYPE_ADD",
		2: "EDIT_FAVORITES_ACTION_TYPE_DEL",
	}
	EditFavoritesActionType_value = map[string]int32{
		"EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED": 0,
		"EDIT_FAVORITES_ACTION_TYPE_ADD":         1,
		"EDIT_FAVORITES_ACTION_TYPE_DEL":         2,
	}
)

func (x EditFavoritesActionType) Enum() *EditFavoritesActionType {
	p := new(EditFavoritesActionType)
	*p = x
	return p
}

func (x EditFavoritesActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditFavoritesActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[6].Descriptor()
}

func (EditFavoritesActionType) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[6]
}

func (x EditFavoritesActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EditFavoritesActionType.Descriptor instead.
func (EditFavoritesActionType) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{6}
}

//Реальная площадка исполнения расчётов.
type RealExchange int32

const (
	RealExchange_REAL_EXCHANGE_UNSPECIFIED RealExchange = 0 //Тип не определён.
	RealExchange_REAL_EXCHANGE_MOEX        RealExchange = 1 //Московская биржа.
	RealExchange_REAL_EXCHANGE_RTS         RealExchange = 2 //Санкт-Петербургская биржа.
	RealExchange_REAL_EXCHANGE_OTC         RealExchange = 3 //Внебиржевой инструмент.
)

// Enum value maps for RealExchange.
var (
	RealExchange_name = map[int32]string{
		0: "REAL_EXCHANGE_UNSPECIFIED",
		1: "REAL_EXCHANGE_MOEX",
		2: "REAL_EXCHANGE_RTS",
		3: "REAL_EXCHANGE_OTC",
	}
	RealExchange_value = map[string]int32{
		"REAL_EXCHANGE_UNSPECIFIED": 0,
		"REAL_EXCHANGE_MOEX":        1,
		"REAL_EXCHANGE_RTS":         2,
		"REAL_EXCHANGE_OTC":         3,
	}
)

func (x RealExchange) Enum() *RealExchange {
	p := new(RealExchange)
	*p = x
	return p
}

func (x RealExchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealExchange) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[7].Descriptor()
}

func (RealExchange) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[7]
}

func (x RealExchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealExchange.Descriptor instead.
func (RealExchange) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{7}
}

//Запрос расписания торгов
type TradingSchedulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string               `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"` //Наименование биржи или расчетного календаря. </br>Если не передаётся, возвращается информация по всем доступным торговым площадкам.
	From     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`         //Начало периода по часовому поясу UTC.
	To       *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`             //Окончание периода по часовому поясу UTC.
}

func (x *TradingSchedulesRequest) Reset() {
	*x = TradingSchedulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSchedulesRequest) ProtoMessage() {}

func (x *TradingSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSchedulesRequest.ProtoReflect.Descriptor instead.
func (*TradingSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{0}
}

func (x *TradingSchedulesRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradingSchedulesRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TradingSchedulesRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

//Список торговых площадок
type TradingSchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchanges []*TradingSchedule `protobuf:"bytes,1,rep,name=exchanges,proto3" json:"exchanges,omitempty"` // Список торговых площадок и режимов торгов.
}

func (x *TradingSchedulesResponse) Reset() {
	*x = TradingSchedulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSchedulesResponse) ProtoMessage() {}

func (x *TradingSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSchedulesResponse.ProtoReflect.Descriptor instead.
func (*TradingSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{1}
}

func (x *TradingSchedulesResponse) GetExchanges() []*TradingSchedule {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

//Данные по торговой площадке.
type TradingSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string        `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"` // Наименование торговой площадки.
	Days     []*TradingDay `protobuf:"bytes,2,rep,name=days,proto3" json:"days,omitempty"`         // Массив с торговыми и неторговыми днями.
}

func (x *TradingSchedule) Reset() {
	*x = TradingSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSchedule) ProtoMessage() {}

func (x *TradingSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSchedule.ProtoReflect.Descriptor instead.
func (*TradingSchedule) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{2}
}

func (x *TradingSchedule) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradingSchedule) GetDays() []*TradingDay {
	if x != nil {
		return x.Days
	}
	return nil
}

//Информация о времени торгов.
type TradingDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                           *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                                                                                 // Дата.
	IsTradingDay                   bool                 `protobuf:"varint,2,opt,name=is_trading_day,json=isTradingDay,proto3" json:"is_trading_day,omitempty"`                                                          // Признак торгового дня на бирже.
	StartTime                      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                      // Время начала торгов по часовому поясу UTC.
	EndTime                        *timestamp.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                            // Время окончания торгов по часовому поясу UTC.
	OpeningAuctionStartTime        *timestamp.Timestamp `protobuf:"bytes,7,opt,name=opening_auction_start_time,json=openingAuctionStartTime,proto3" json:"opening_auction_start_time,omitempty"`                        // Время начала аукциона открытия в часовом поясе UTC.
	ClosingAuctionEndTime          *timestamp.Timestamp `protobuf:"bytes,8,opt,name=closing_auction_end_time,json=closingAuctionEndTime,proto3" json:"closing_auction_end_time,omitempty"`                              // Время окончания аукциона закрытия в часовом поясе UTC.
	EveningOpeningAuctionStartTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=evening_opening_auction_start_time,json=eveningOpeningAuctionStartTime,proto3" json:"evening_opening_auction_start_time,omitempty"` // Время начала аукциона открытия вечерней сессии в часовом поясе UTC.
	EveningStartTime               *timestamp.Timestamp `protobuf:"bytes,10,opt,name=evening_start_time,json=eveningStartTime,proto3" json:"evening_start_time,omitempty"`                                              // Время начала вечерней сессии в часовом поясе UTC.
	EveningEndTime                 *timestamp.Timestamp `protobuf:"bytes,11,opt,name=evening_end_time,json=eveningEndTime,proto3" json:"evening_end_time,omitempty"`                                                    // Время окончания вечерней сессии в часовом поясе UTC.
	ClearingStartTime              *timestamp.Timestamp `protobuf:"bytes,12,opt,name=clearing_start_time,json=clearingStartTime,proto3" json:"clearing_start_time,omitempty"`                                           // Время начала основного клиринга в часовом поясе UTC.
	ClearingEndTime                *timestamp.Timestamp `protobuf:"bytes,13,opt,name=clearing_end_time,json=clearingEndTime,proto3" json:"clearing_end_time,omitempty"`                                                 // Время окончания основного клиринга в часовом поясе UTC.
	PremarketStartTime             *timestamp.Timestamp `protobuf:"bytes,14,opt,name=premarket_start_time,json=premarketStartTime,proto3" json:"premarket_start_time,omitempty"`                                        // Время начала премаркета в часовом поясе UTC.
	PremarketEndTime               *timestamp.Timestamp `protobuf:"bytes,15,opt,name=premarket_end_time,json=premarketEndTime,proto3" json:"premarket_end_time,omitempty"`                                              // Время окончания премаркета в часовом поясе UTC.
}

func (x *TradingDay) Reset() {
	*x = TradingDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingDay) ProtoMessage() {}

func (x *TradingDay) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingDay.ProtoReflect.Descriptor instead.
func (*TradingDay) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{3}
}

func (x *TradingDay) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TradingDay) GetIsTradingDay() bool {
	if x != nil {
		return x.IsTradingDay
	}
	return false
}

func (x *TradingDay) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TradingDay) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TradingDay) GetOpeningAuctionStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.OpeningAuctionStartTime
	}
	return nil
}

func (x *TradingDay) GetClosingAuctionEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.ClosingAuctionEndTime
	}
	return nil
}

func (x *TradingDay) GetEveningOpeningAuctionStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.EveningOpeningAuctionStartTime
	}
	return nil
}

func (x *TradingDay) GetEveningStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.EveningStartTime
	}
	return nil
}

func (x *TradingDay) GetEveningEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EveningEndTime
	}
	return nil
}

func (x *TradingDay) GetClearingStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.ClearingStartTime
	}
	return nil
}

func (x *TradingDay) GetClearingEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.ClearingEndTime
	}
	return nil
}

func (x *TradingDay) GetPremarketStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.PremarketStartTime
	}
	return nil
}

func (x *TradingDay) GetPremarketEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.PremarketEndTime
	}
	return nil
}

//Запрос получения инструмента по идентификатору.
type InstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdType    InstrumentIdType `protobuf:"varint,1,opt,name=id_type,json=idType,proto3,enum=tinkoff.public.invest.api.contract.v1.InstrumentIdType" json:"id_type,omitempty"` // Тип идентификатора инструмента. Возможные значения: figi, ticker. Подробнее об идентификации инструментов: [Идентификация инструментов](https://tinkoff.github.io/investAPI/faq_identification/)
	ClassCode string           `protobuf:"bytes,2,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                     // Идентификатор class_code. Обязателен при id_type = ticker.
	Id        string           `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                                                                    // Идентификатор запрашиваемого инструмента.
}

func (x *InstrumentRequest) Reset() {
	*x = InstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentRequest) ProtoMessage() {}

func (x *InstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentRequest.ProtoReflect.Descriptor instead.
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{4}
}

func (x *InstrumentRequest) GetIdType() InstrumentIdType {
	if x != nil {
		return x.IdType
	}
	return InstrumentIdType_INSTRUMENT_ID_UNSPECIFIED
}

func (x *InstrumentRequest) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *InstrumentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//Запрос получения инструментов.
type InstrumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentStatus InstrumentStatus `protobuf:"varint,1,opt,name=instrument_status,json=instrumentStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.InstrumentStatus" json:"instrument_status,omitempty"` //Статус запрашиваемых инструментов. Возможные значения: [InstrumentStatus](#instrumentstatus)
}

func (x *InstrumentsRequest) Reset() {
	*x = InstrumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentsRequest) ProtoMessage() {}

func (x *InstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentsRequest.ProtoReflect.Descriptor instead.
func (*InstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{5}
}

func (x *InstrumentsRequest) GetInstrumentStatus() InstrumentStatus {
	if x != nil {
		return x.InstrumentStatus
	}
	return InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED
}

//Информация об облигации.
type BondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Bond `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация об облигации.
}

func (x *BondResponse) Reset() {
	*x = BondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondResponse) ProtoMessage() {}

func (x *BondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondResponse.ProtoReflect.Descriptor instead.
func (*BondResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{6}
}

func (x *BondResponse) GetInstrument() *Bond {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Список облигаций.
type BondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Bond `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив облигаций.
}

func (x *BondsResponse) Reset() {
	*x = BondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondsResponse) ProtoMessage() {}

func (x *BondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondsResponse.ProtoReflect.Descriptor instead.
func (*BondsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{7}
}

func (x *BondsResponse) GetInstruments() []*Bond {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Запрос купонов по облигации.
type GetBondCouponsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"` //Figi-идентификатор инструмента.
	From *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"` //Начало запрашиваемого периода в часовом поясе UTC. Фильтрация по coupon_date (дата выплаты купона)
	To   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`     //Окончание запрашиваемого периода в часовом поясе UTC. Фильтрация по coupon_date (дата выплаты купона)
}

func (x *GetBondCouponsRequest) Reset() {
	*x = GetBondCouponsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBondCouponsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBondCouponsRequest) ProtoMessage() {}

func (x *GetBondCouponsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBondCouponsRequest.ProtoReflect.Descriptor instead.
func (*GetBondCouponsRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{8}
}

func (x *GetBondCouponsRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetBondCouponsRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetBondCouponsRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

//Купоны по облигации.
type GetBondCouponsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Coupon `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetBondCouponsResponse) Reset() {
	*x = GetBondCouponsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBondCouponsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBondCouponsResponse) ProtoMessage() {}

func (x *GetBondCouponsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBondCouponsResponse.ProtoReflect.Descriptor instead.
func (*GetBondCouponsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{9}
}

func (x *GetBondCouponsResponse) GetEvents() []*Coupon {
	if x != nil {
		return x.Events
	}
	return nil
}

//Объект передачи информации о купоне облигации.
type Coupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi            string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                      //Figi-идентификатор инструмента.
	CouponDate      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=coupon_date,json=couponDate,proto3" json:"coupon_date,omitempty"`                                                        //Дата выплаты купона
	CouponNumber    int64                `protobuf:"varint,3,opt,name=coupon_number,json=couponNumber,proto3" json:"coupon_number,omitempty"`                                                 //Номер купона
	FixDate         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=fix_date,json=fixDate,proto3" json:"fix_date,omitempty"`                                                                 //(Опционально) Дата фиксации реестра для выплаты купона
	PayOneBond      *MoneyValue          `protobuf:"bytes,5,opt,name=pay_one_bond,json=payOneBond,proto3" json:"pay_one_bond,omitempty"`                                                      //Выплата на одну облигацию
	CouponType      CouponType           `protobuf:"varint,6,opt,name=coupon_type,json=couponType,proto3,enum=tinkoff.public.invest.api.contract.v1.CouponType" json:"coupon_type,omitempty"` //Тип купона
	CouponStartDate *timestamp.Timestamp `protobuf:"bytes,7,opt,name=coupon_start_date,json=couponStartDate,proto3" json:"coupon_start_date,omitempty"`                                       //Начало купонного периода.
	CouponEndDate   *timestamp.Timestamp `protobuf:"bytes,8,opt,name=coupon_end_date,json=couponEndDate,proto3" json:"coupon_end_date,omitempty"`                                             //Окончание купонного периода.
	CouponPeriod    int32                `protobuf:"varint,9,opt,name=coupon_period,json=couponPeriod,proto3" json:"coupon_period,omitempty"`                                                 //Купонный период в днях.
}

func (x *Coupon) Reset() {
	*x = Coupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coupon) ProtoMessage() {}

func (x *Coupon) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coupon.ProtoReflect.Descriptor instead.
func (*Coupon) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{10}
}

func (x *Coupon) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Coupon) GetCouponDate() *timestamp.Timestamp {
	if x != nil {
		return x.CouponDate
	}
	return nil
}

func (x *Coupon) GetCouponNumber() int64 {
	if x != nil {
		return x.CouponNumber
	}
	return 0
}

func (x *Coupon) GetFixDate() *timestamp.Timestamp {
	if x != nil {
		return x.FixDate
	}
	return nil
}

func (x *Coupon) GetPayOneBond() *MoneyValue {
	if x != nil {
		return x.PayOneBond
	}
	return nil
}

func (x *Coupon) GetCouponType() CouponType {
	if x != nil {
		return x.CouponType
	}
	return CouponType_COUPON_TYPE_UNSPECIFIED
}

func (x *Coupon) GetCouponStartDate() *timestamp.Timestamp {
	if x != nil {
		return x.CouponStartDate
	}
	return nil
}

func (x *Coupon) GetCouponEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.CouponEndDate
	}
	return nil
}

func (x *Coupon) GetCouponPeriod() int32 {
	if x != nil {
		return x.CouponPeriod
	}
	return 0
}

//Данные по валюте.
type CurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Currency `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация о валюте.
}

func (x *CurrencyResponse) Reset() {
	*x = CurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyResponse) ProtoMessage() {}

func (x *CurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyResponse.ProtoReflect.Descriptor instead.
func (*CurrencyResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{11}
}

func (x *CurrencyResponse) GetInstrument() *Currency {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Данные по валютам.
type CurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Currency `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив валют.
}

func (x *CurrenciesResponse) Reset() {
	*x = CurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrenciesResponse) ProtoMessage() {}

func (x *CurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrenciesResponse.ProtoReflect.Descriptor instead.
func (*CurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{12}
}

func (x *CurrenciesResponse) GetInstruments() []*Currency {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Данные по фонду.
type EtfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Etf `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация о фонде.
}

func (x *EtfResponse) Reset() {
	*x = EtfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtfResponse) ProtoMessage() {}

func (x *EtfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtfResponse.ProtoReflect.Descriptor instead.
func (*EtfResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{13}
}

func (x *EtfResponse) GetInstrument() *Etf {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Данные по фондам.
type EtfsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Etf `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив фондов.
}

func (x *EtfsResponse) Reset() {
	*x = EtfsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtfsResponse) ProtoMessage() {}

func (x *EtfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtfsResponse.ProtoReflect.Descriptor instead.
func (*EtfsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{14}
}

func (x *EtfsResponse) GetInstruments() []*Etf {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Данные по фьючерсу.
type FutureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Future `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация о фьючерсу.
}

func (x *FutureResponse) Reset() {
	*x = FutureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureResponse) ProtoMessage() {}

func (x *FutureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureResponse.ProtoReflect.Descriptor instead.
func (*FutureResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{15}
}

func (x *FutureResponse) GetInstrument() *Future {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Данные по фьючерсам.
type FuturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Future `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив фьючерсов.
}

func (x *FuturesResponse) Reset() {
	*x = FuturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuturesResponse) ProtoMessage() {}

func (x *FuturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuturesResponse.ProtoReflect.Descriptor instead.
func (*FuturesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{16}
}

func (x *FuturesResponse) GetInstruments() []*Future {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Данные по акции.
type ShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Share `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация об акции.
}

func (x *ShareResponse) Reset() {
	*x = ShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareResponse) ProtoMessage() {}

func (x *ShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareResponse.ProtoReflect.Descriptor instead.
func (*ShareResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{17}
}

func (x *ShareResponse) GetInstrument() *Share {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Данные по акциям.
type SharesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Share `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив акций.
}

func (x *SharesResponse) Reset() {
	*x = SharesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharesResponse) ProtoMessage() {}

func (x *SharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharesResponse.ProtoReflect.Descriptor instead.
func (*SharesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{18}
}

func (x *SharesResponse) GetInstruments() []*Share {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Объект передачи информации об облигации.
type Bond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                         //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                       //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                         //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                      //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                  //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                               //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	CouponQuantityPerYear int32                 `protobuf:"varint,17,opt,name=coupon_quantity_per_year,json=couponQuantityPerYear,proto3" json:"coupon_quantity_per_year,omitempty"`                                      //Количество выплат по купонам в год.
	MaturityDate          *timestamp.Timestamp  `protobuf:"bytes,18,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`                                                                      //Дата погашения облигации в часовом поясе UTC.
	Nominal               *MoneyValue           `protobuf:"bytes,19,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                                                    //Номинал облигации.
	StateRegDate          *timestamp.Timestamp  `protobuf:"bytes,21,opt,name=state_reg_date,json=stateRegDate,proto3" json:"state_reg_date,omitempty"`                                                                    //Дата выпуска облигации в часовом поясе UTC.
	PlacementDate         *timestamp.Timestamp  `protobuf:"bytes,22,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`                                                                   //Дата размещения в часовом поясе UTC.
	PlacementPrice        *MoneyValue           `protobuf:"bytes,23,opt,name=placement_price,json=placementPrice,proto3" json:"placement_price,omitempty"`                                                                //Цена размещения.
	AciValue              *MoneyValue           `protobuf:"bytes,24,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`                                                                                  //Значение НКД (накопленного купонного дохода) на дату.
	CountryOfRisk         string                `protobuf:"bytes,25,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	CountryOfRiskName     string                `protobuf:"bytes,26,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	Sector                string                `protobuf:"bytes,27,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                                      //Сектор экономики.
	IssueKind             string                `protobuf:"bytes,28,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                                                                               //Форма выпуска. Возможные значения: </br>**documentary** — документарная; </br>**non_documentary** — бездокументарная.
	IssueSize             int64                 `protobuf:"varint,29,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                                                                              //Размер выпуска.
	IssueSizePlan         int64                 `protobuf:"varint,30,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`                                                                //Плановый размер выпуска.
	TradingStatus         SecurityTradingStatus `protobuf:"varint,31,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                  `protobuf:"varint,32,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                  `protobuf:"varint,33,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                  `protobuf:"varint,34,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	FloatingCouponFlag    bool                  `protobuf:"varint,35,opt,name=floating_coupon_flag,json=floatingCouponFlag,proto3" json:"floating_coupon_flag,omitempty"`                                                 //Признак облигации с плавающим купоном.
	PerpetualFlag         bool                  `protobuf:"varint,36,opt,name=perpetual_flag,json=perpetualFlag,proto3" json:"perpetual_flag,omitempty"`                                                                  //Признак бессрочной облигации.
	AmortizationFlag      bool                  `protobuf:"varint,37,opt,name=amortization_flag,json=amortizationFlag,proto3" json:"amortization_flag,omitempty"`                                                         //Признак облигации с амортизацией долга.
	MinPriceIncrement     *Quotation            `protobuf:"bytes,38,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                     //Шаг цены.
	ApiTradeAvailableFlag bool                  `protobuf:"varint,39,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
	Uid                   string                `protobuf:"bytes,40,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                            //Уникальный идентификатор инструмента.
	RealExchange          RealExchange          `protobuf:"varint,41,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчётов.
}

func (x *Bond) Reset() {
	*x = Bond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bond) ProtoMessage() {}

func (x *Bond) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bond.ProtoReflect.Descriptor instead.
func (*Bond) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{19}
}

func (x *Bond) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Bond) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Bond) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Bond) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Bond) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Bond) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Bond) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

func (x *Bond) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Bond) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Bond) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Bond) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Bond) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Bond) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Bond) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bond) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Bond) GetCouponQuantityPerYear() int32 {
	if x != nil {
		return x.CouponQuantityPerYear
	}
	return 0
}

func (x *Bond) GetMaturityDate() *timestamp.Timestamp {
	if x != nil {
		return x.MaturityDate
	}
	return nil
}

func (x *Bond) GetNominal() *MoneyValue {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *Bond) GetStateRegDate() *timestamp.Timestamp {
	if x != nil {
		return x.StateRegDate
	}
	return nil
}

func (x *Bond) GetPlacementDate() *timestamp.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *Bond) GetPlacementPrice() *MoneyValue {
	if x != nil {
		return x.PlacementPrice
	}
	return nil
}

func (x *Bond) GetAciValue() *MoneyValue {
	if x != nil {
		return x.AciValue
	}
	return nil
}

func (x *Bond) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Bond) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Bond) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Bond) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

func (x *Bond) GetIssueSize() int64 {
	if x != nil {
		return x.IssueSize
	}
	return 0
}

func (x *Bond) GetIssueSizePlan() int64 {
	if x != nil {
		return x.IssueSizePlan
	}
	return 0
}

func (x *Bond) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Bond) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Bond) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Bond) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Bond) GetFloatingCouponFlag() bool {
	if x != nil {
		return x.FloatingCouponFlag
	}
	return false
}

func (x *Bond) GetPerpetualFlag() bool {
	if x != nil {
		return x.PerpetualFlag
	}
	return false
}

func (x *Bond) GetAmortizationFlag() bool {
	if x != nil {
		return x.AmortizationFlag
	}
	return false
}

func (x *Bond) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Bond) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Bond) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Bond) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Объект передачи информации о валюте.
type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                         //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                       //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                         //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                      //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                  //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                               //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	Nominal               *MoneyValue           `protobuf:"bytes,17,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                                                    //Номинал.
	CountryOfRisk         string                `protobuf:"bytes,18,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	CountryOfRiskName     string                `protobuf:"bytes,19,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	TradingStatus         SecurityTradingStatus `protobuf:"varint,20,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                  `protobuf:"varint,21,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                  `protobuf:"varint,22,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                  `protobuf:"varint,23,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	IsoCurrencyName       string                `protobuf:"bytes,24,opt,name=iso_currency_name,json=isoCurrencyName,proto3" json:"iso_currency_name,omitempty"`                                                           //Строковый ISO-код валюты.
	MinPriceIncrement     *Quotation            `protobuf:"bytes,25,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                     //Шаг цены.
	ApiTradeAvailableFlag bool                  `protobuf:"varint,26,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
	Uid                   string                `protobuf:"bytes,27,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                            //Уникальный идентификатор инструмента.
	RealExchange          RealExchange          `protobuf:"varint,28,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчётов.
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{20}
}

func (x *Currency) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Currency) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Currency) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Currency) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Currency) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Currency) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Currency) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

func (x *Currency) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Currency) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Currency) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Currency) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Currency) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Currency) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Currency) GetNominal() *MoneyValue {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *Currency) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Currency) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Currency) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Currency) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Currency) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Currency) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Currency) GetIsoCurrencyName() string {
	if x != nil {
		return x.IsoCurrencyName
	}
	return ""
}

func (x *Currency) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Currency) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Currency) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Currency) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Объект передачи информации об инвестиционном фонде.
type Etf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                         //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                       //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                         //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                      //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                  //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                               //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	FixedCommission       *Quotation            `protobuf:"bytes,17,opt,name=fixed_commission,json=fixedCommission,proto3" json:"fixed_commission,omitempty"`                                                             //Размер фиксированной комиссии фонда.
	FocusType             string                `protobuf:"bytes,18,opt,name=focus_type,json=focusType,proto3" json:"focus_type,omitempty"`                                                                               //Возможные значения: </br>**equity** — акции;</br>**fixed_income** — облигации;</br>**mixed_allocation** — смешанный;</br>**money_market** — денежный рынок;</br>**real_estate** — недвижимость;</br>**commodity** — товары;</br>**specialty** — специальный;</br>**private_equity** — private equity;</br>**alternative_investment** — альтернативные инвестиции.
	ReleasedDate          *timestamp.Timestamp  `protobuf:"bytes,19,opt,name=released_date,json=releasedDate,proto3" json:"released_date,omitempty"`                                                                      //Дата выпуска в часовом поясе UTC.
	NumShares             *Quotation            `protobuf:"bytes,20,opt,name=num_shares,json=numShares,proto3" json:"num_shares,omitempty"`                                                                               //Количество акций фонда в обращении.
	CountryOfRisk         string                `protobuf:"bytes,21,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	CountryOfRiskName     string                `protobuf:"bytes,22,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	Sector                string                `protobuf:"bytes,23,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                                      //Сектор экономики.
	RebalancingFreq       string                `protobuf:"bytes,24,opt,name=rebalancing_freq,json=rebalancingFreq,proto3" json:"rebalancing_freq,omitempty"`                                                             //Частота ребалансировки.
	TradingStatus         SecurityTradingStatus `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                  `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                  `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                  `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	MinPriceIncrement     *Quotation            `protobuf:"bytes,29,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                     //Шаг цены.
	ApiTradeAvailableFlag bool                  `protobuf:"varint,30,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
	Uid                   string                `protobuf:"bytes,31,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                            //Уникальный идентификатор инструмента.
	RealExchange          RealExchange          `protobuf:"varint,32,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчётов.
}

func (x *Etf) Reset() {
	*x = Etf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Etf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Etf) ProtoMessage() {}

func (x *Etf) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Etf.ProtoReflect.Descriptor instead.
func (*Etf) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{21}
}

func (x *Etf) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Etf) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Etf) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Etf) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Etf) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Etf) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Etf) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

func (x *Etf) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Etf) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Etf) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Etf) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Etf) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Etf) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Etf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Etf) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Etf) GetFixedCommission() *Quotation {
	if x != nil {
		return x.FixedCommission
	}
	return nil
}

func (x *Etf) GetFocusType() string {
	if x != nil {
		return x.FocusType
	}
	return ""
}

func (x *Etf) GetReleasedDate() *timestamp.Timestamp {
	if x != nil {
		return x.ReleasedDate
	}
	return nil
}

func (x *Etf) GetNumShares() *Quotation {
	if x != nil {
		return x.NumShares
	}
	return nil
}

func (x *Etf) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Etf) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Etf) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Etf) GetRebalancingFreq() string {
	if x != nil {
		return x.RebalancingFreq
	}
	return ""
}

func (x *Etf) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Etf) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Etf) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Etf) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Etf) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Etf) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Etf) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Etf) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Объект передачи информации о фьючерсе.
type Future struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Lot                   int32                 `protobuf:"varint,4,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
	Currency              string                `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 *Quotation            `protobuf:"bytes,6,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                         //Коэффициент ставки риска длинной позиции по клиенту.
	Kshort                *Quotation            `protobuf:"bytes,7,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                       //Коэффициент ставки риска короткой позиции по клиенту.
	Dlong                 *Quotation            `protobuf:"bytes,8,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                         //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                *Quotation            `protobuf:"bytes,9,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                       //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              *Quotation            `protobuf:"bytes,10,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                  //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             *Quotation            `protobuf:"bytes,11,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                               //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                  `protobuf:"varint,12,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций шорт.
	Name                  string                `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                `protobuf:"bytes,14,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	FirstTradeDate        *timestamp.Timestamp  `protobuf:"bytes,15,opt,name=first_trade_date,json=firstTradeDate,proto3" json:"first_trade_date,omitempty"`                                                              //Дата начала обращения контракта в часовом поясе UTC.
	LastTradeDate         *timestamp.Timestamp  `protobuf:"bytes,16,opt,name=last_trade_date,json=lastTradeDate,proto3" json:"last_trade_date,omitempty"`                                                                 //Дата в часовом поясе UTC, до которой возможно проведение операций с фьючерсом.
	FuturesType           string                `protobuf:"bytes,17,opt,name=futures_type,json=futuresType,proto3" json:"futures_type,omitempty"`                                                                         //Тип фьючерса. Возможные значения: </br>**physical_delivery** — физические поставки; </br>**cash_settlement** — денежный эквивалент.
	AssetType             string                `protobuf:"bytes,18,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`                                                                               //Тип актива. Возможные значения: </br>**commodity** — товар; </br>**currency** — валюта; </br>**security** — ценная бумага; </br>**index** — индекс.
	BasicAsset            string                `protobuf:"bytes,19,opt,name=basic_asset,json=basicAsset,proto3" json:"basic_asset,omitempty"`                                                                            //Основной актив.
	BasicAssetSize        *Quotation            `protobuf:"bytes,20,opt,name=basic_asset_size,json=basicAssetSize,proto3" json:"basic_asset_size,omitempty"`                                                              //Размер основного актива.
	CountryOfRisk         string                `protobuf:"bytes,21,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	CountryOfRiskName     string                `protobuf:"bytes,22,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	Sector                string                `protobuf:"bytes,23,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                                      //Сектор экономики.
	ExpirationDate        *timestamp.Timestamp  `protobuf:"bytes,24,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`                                                                //Дата истечения срока в часов поясе UTC.
	TradingStatus         SecurityTradingStatus `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                  `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                  `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                  `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	MinPriceIncrement     *Quotation            `protobuf:"bytes,29,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                     //Шаг цены.
	ApiTradeAvailableFlag bool                  `protobuf:"varint,30,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
	Uid                   string                `protobuf:"bytes,31,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                            //Уникальный идентификатор инструмента.
	RealExchange          RealExchange          `protobuf:"varint,32,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчётов.
}

func (x *Future) Reset() {
	*x = Future{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Future) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Future) ProtoMessage() {}

func (x *Future) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Future.ProtoReflect.Descriptor instead.
func (*Future) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{22}
}

func (x *Future) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Future) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Future) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Future) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Future) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Future) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

func (x *Future) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Future) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Future) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Future) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Future) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Future) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Future) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Future) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Future) GetFirstTradeDate() *timestamp.Timestamp {
	if x != nil {
		return x.FirstTradeDate
	}
	return nil
}

func (x *Future) GetLastTradeDate() *timestamp.Timestamp {
	if x != nil {
		return x.LastTradeDate
	}
	return nil
}

func (x *Future) GetFuturesType() string {
	if x != nil {
		return x.FuturesType
	}
	return ""
}

func (x *Future) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Future) GetBasicAsset() string {
	if x != nil {
		return x.BasicAsset
	}
	return ""
}

func (x *Future) GetBasicAssetSize() *Quotation {
	if x != nil {
		return x.BasicAssetSize
	}
	return nil
}

func (x *Future) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Future) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Future) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Future) GetExpirationDate() *timestamp.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Future) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Future) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Future) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Future) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Future) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Future) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Future) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Future) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Объект передачи информации об акции.
type Share struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                         //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                       //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                         //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                      //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                  //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                               //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	IpoDate               *timestamp.Timestamp  `protobuf:"bytes,17,opt,name=ipo_date,json=ipoDate,proto3" json:"ipo_date,omitempty"`                                                                                     //Дата IPO акции в часовом поясе UTC.
	IssueSize             int64                 `protobuf:"varint,18,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                                                                              //Размер выпуска.
	CountryOfRisk         string                `protobuf:"bytes,19,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	CountryOfRiskName     string                `protobuf:"bytes,20,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	Sector                string                `protobuf:"bytes,21,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                                      //Сектор экономики.
	IssueSizePlan         int64                 `protobuf:"varint,22,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`                                                                //Плановый размер выпуска.
	Nominal               *MoneyValue           `protobuf:"bytes,23,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                                                    //Номинал.
	TradingStatus         SecurityTradingStatus `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                  `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                  `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                  `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	DivYieldFlag          bool                  `protobuf:"varint,29,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`                                                                   //Признак наличия дивидендной доходности.
	ShareType             ShareType             `protobuf:"varint,30,opt,name=share_type,json=shareType,proto3,enum=tinkoff.public.invest.api.contract.v1.ShareType" json:"share_type,omitempty"`                         //Тип акции. Возможные значения: [ShareType](https://tinkoff.github.io/investAPI/instruments#sharetype)
	MinPriceIncrement     *Quotation            `protobuf:"bytes,31,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                     //Шаг цены.
	ApiTradeAvailableFlag bool                  `protobuf:"varint,32,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
	Uid                   string                `protobuf:"bytes,33,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                            //Уникальный идентификатор инструмента.
	RealExchange          RealExchange          `protobuf:"varint,34,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчётов.
}

func (x *Share) Reset() {
	*x = Share{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{23}
}

func (x *Share) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Share) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Share) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Share) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Share) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Share) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Share) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

func (x *Share) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Share) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Share) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Share) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Share) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Share) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Share) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Share) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Share) GetIpoDate() *timestamp.Timestamp {
	if x != nil {
		return x.IpoDate
	}
	return nil
}

func (x *Share) GetIssueSize() int64 {
	if x != nil {
		return x.IssueSize
	}
	return 0
}

func (x *Share) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Share) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Share) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Share) GetIssueSizePlan() int64 {
	if x != nil {
		return x.IssueSizePlan
	}
	return 0
}

func (x *Share) GetNominal() *MoneyValue {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *Share) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Share) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Share) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Share) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Share) GetDivYieldFlag() bool {
	if x != nil {
		return x.DivYieldFlag
	}
	return false
}

func (x *Share) GetShareType() ShareType {
	if x != nil {
		return x.ShareType
	}
	return ShareType_SHARE_TYPE_UNSPECIFIED
}

func (x *Share) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Share) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Share) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Share) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Запрос НКД по облигации
type GetAccruedInterestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"` //Figi-идентификатор инструмента.
	From *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"` //Начало запрашиваемого периода в часовом поясе UTC.
	To   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`     //Окончание запрашиваемого периода в часовом поясе UTC.
}

func (x *GetAccruedInterestsRequest) Reset() {
	*x = GetAccruedInterestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccruedInterestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccruedInterestsRequest) ProtoMessage() {}

func (x *GetAccruedInterestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccruedInterestsRequest.ProtoReflect.Descriptor instead.
func (*GetAccruedInterestsRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{24}
}

func (x *GetAccruedInterestsRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetAccruedInterestsRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetAccruedInterestsRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

//НКД облигации
type GetAccruedInterestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccruedInterests []*AccruedInterest `protobuf:"bytes,1,rep,name=accrued_interests,json=accruedInterests,proto3" json:"accrued_interests,omitempty"` //Массив операций начисления купонов.
}

func (x *GetAccruedInterestsResponse) Reset() {
	*x = GetAccruedInterestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccruedInterestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccruedInterestsResponse) ProtoMessage() {}

func (x *GetAccruedInterestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccruedInterestsResponse.ProtoReflect.Descriptor instead.
func (*GetAccruedInterestsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{25}
}

func (x *GetAccruedInterestsResponse) GetAccruedInterests() []*AccruedInterest {
	if x != nil {
		return x.AccruedInterests
	}
	return nil
}

//Операция начисления купонов.
type AccruedInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                     //Дата и время выплаты в часовом поясе UTC.
	Value        *Quotation           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                                   //Величина выплаты.
	ValuePercent *Quotation           `protobuf:"bytes,3,opt,name=value_percent,json=valuePercent,proto3" json:"value_percent,omitempty"` //Величина выплаты в процентах от номинала.
	Nominal      *Quotation           `protobuf:"bytes,4,opt,name=nominal,proto3" json:"nominal,omitempty"`                               //Номинал облигации.
}

func (x *AccruedInterest) Reset() {
	*x = AccruedInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccruedInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccruedInterest) ProtoMessage() {}

func (x *AccruedInterest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccruedInterest.ProtoReflect.Descriptor instead.
func (*AccruedInterest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{26}
}

func (x *AccruedInterest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *AccruedInterest) GetValue() *Quotation {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AccruedInterest) GetValuePercent() *Quotation {
	if x != nil {
		return x.ValuePercent
	}
	return nil
}

func (x *AccruedInterest) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

//Запрос информации о фьючерсе
type GetFuturesMarginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"` // Идентификатор инструмента.
}

func (x *GetFuturesMarginRequest) Reset() {
	*x = GetFuturesMarginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFuturesMarginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFuturesMarginRequest) ProtoMessage() {}

func (x *GetFuturesMarginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFuturesMarginRequest.ProtoReflect.Descriptor instead.
func (*GetFuturesMarginRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{27}
}

func (x *GetFuturesMarginRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

//Данные по фьючерсу
type GetFuturesMarginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialMarginOnBuy      *MoneyValue `protobuf:"bytes,1,opt,name=initial_margin_on_buy,json=initialMarginOnBuy,proto3" json:"initial_margin_on_buy,omitempty"`                //Гарантийное обеспечение при покупке.
	InitialMarginOnSell     *MoneyValue `protobuf:"bytes,2,opt,name=initial_margin_on_sell,json=initialMarginOnSell,proto3" json:"initial_margin_on_sell,omitempty"`             //Гарантийное обеспечение при продаже.
	MinPriceIncrement       *Quotation  `protobuf:"bytes,3,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                     //Шаг цены.
	MinPriceIncrementAmount *Quotation  `protobuf:"bytes,4,opt,name=min_price_increment_amount,json=minPriceIncrementAmount,proto3" json:"min_price_increment_amount,omitempty"` //Стоимость шага цены.
}

func (x *GetFuturesMarginResponse) Reset() {
	*x = GetFuturesMarginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFuturesMarginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFuturesMarginResponse) ProtoMessage() {}

func (x *GetFuturesMarginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFuturesMarginResponse.ProtoReflect.Descriptor instead.
func (*GetFuturesMarginResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{28}
}

func (x *GetFuturesMarginResponse) GetInitialMarginOnBuy() *MoneyValue {
	if x != nil {
		return x.InitialMarginOnBuy
	}
	return nil
}

func (x *GetFuturesMarginResponse) GetInitialMarginOnSell() *MoneyValue {
	if x != nil {
		return x.InitialMarginOnSell
	}
	return nil
}

func (x *GetFuturesMarginResponse) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *GetFuturesMarginResponse) GetMinPriceIncrementAmount() *Quotation {
	if x != nil {
		return x.MinPriceIncrementAmount
	}
	return nil
}

//Данные по инструменту.
type InstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Основная информация об инструменте.
}

func (x *InstrumentResponse) Reset() {
	*x = InstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentResponse) ProtoMessage() {}

func (x *InstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentResponse.ProtoReflect.Descriptor instead.
func (*InstrumentResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{29}
}

func (x *InstrumentResponse) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Объект передачи основной информации об инструменте.
type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код инструмента.
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 *Quotation            `protobuf:"bytes,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                         //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                *Quotation            `protobuf:"bytes,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                       //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 *Quotation            `protobuf:"bytes,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                         //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                *Quotation            `protobuf:"bytes,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                      //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              *Quotation            `protobuf:"bytes,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                  //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             *Quotation            `protobuf:"bytes,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                               //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                `protobuf:"bytes,15,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	CountryOfRisk         string                `protobuf:"bytes,16,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	CountryOfRiskName     string                `protobuf:"bytes,17,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
	InstrumentType        string                `protobuf:"bytes,18,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                                                                //Тип инструмента.
	TradingStatus         SecurityTradingStatus `protobuf:"varint,19,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                  `protobuf:"varint,20,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                  `protobuf:"varint,21,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                  `protobuf:"varint,22,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	MinPriceIncrement     *Quotation            `protobuf:"bytes,23,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                     //Шаг цены.
	ApiTradeAvailableFlag bool                  `protobuf:"varint,24,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
	Uid                   string                `protobuf:"bytes,25,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                            //Уникальный идентификатор инструмента.
	RealExchange          RealExchange          `protobuf:"varint,26,opt,name=real_exchange,json=realExchange,proto3,enum=tinkoff.public.invest.api.contract.v1.RealExchange" json:"real_exchange,omitempty"`             //Реальная площадка исполнения расчётов.
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{30}
}

func (x *Instrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Instrument) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Instrument) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Instrument) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Instrument) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Instrument) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Instrument) GetKlong() *Quotation {
	if x != nil {
		return x.Klong
	}
	return nil
}

func (x *Instrument) GetKshort() *Quotation {
	if x != nil {
		return x.Kshort
	}
	return nil
}

func (x *Instrument) GetDlong() *Quotation {
	if x != nil {
		return x.Dlong
	}
	return nil
}

func (x *Instrument) GetDshort() *Quotation {
	if x != nil {
		return x.Dshort
	}
	return nil
}

func (x *Instrument) GetDlongMin() *Quotation {
	if x != nil {
		return x.DlongMin
	}
	return nil
}

func (x *Instrument) GetDshortMin() *Quotation {
	if x != nil {
		return x.DshortMin
	}
	return nil
}

func (x *Instrument) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Instrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Instrument) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Instrument) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Instrument) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *Instrument) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Instrument) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Instrument) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Instrument) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Instrument) GetMinPriceIncrement() *Quotation {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Instrument) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *Instrument) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Instrument) GetRealExchange() RealExchange {
	if x != nil {
		return x.RealExchange
	}
	return RealExchange_REAL_EXCHANGE_UNSPECIFIED
}

//Запрос дивидендов.
type GetDividendsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"` //Figi-идентификатор инструмента.
	From *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"` //Начало запрашиваемого периода в часовом поясе UTC. Фильтрация происходит по параметру *record_date* (дата фиксации реестра).
	To   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`     //Окончание запрашиваемого периода в часовом поясе UTC. Фильтрация происходит по параметру *record_date* (дата фиксации реестра).
}

func (x *GetDividendsRequest) Reset() {
	*x = GetDividendsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsRequest) ProtoMessage() {}

func (x *GetDividendsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsRequest.ProtoReflect.Descriptor instead.
func (*GetDividendsRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{31}
}

func (x *GetDividendsRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetDividendsRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetDividendsRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

//Дивиденды.
type GetDividendsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dividends []*Dividend `protobuf:"bytes,1,rep,name=dividends,proto3" json:"dividends,omitempty"`
}

func (x *GetDividendsResponse) Reset() {
	*x = GetDividendsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsResponse) ProtoMessage() {}

func (x *GetDividendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsResponse.ProtoReflect.Descriptor instead.
func (*GetDividendsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{32}
}

func (x *GetDividendsResponse) GetDividends() []*Dividend {
	if x != nil {
		return x.Dividends
	}
	return nil
}

//Информация о выплате.
type Dividend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DividendNet  *MoneyValue          `protobuf:"bytes,1,opt,name=dividend_net,json=dividendNet,proto3" json:"dividend_net,omitempty"`    //Величина дивиденда на 1 ценную бумагу (включая валюту).
	PaymentDate  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`    //Дата фактических выплат в часовом поясе UTC.
	DeclaredDate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=declared_date,json=declaredDate,proto3" json:"declared_date,omitempty"` //Дата объявления дивидендов в часовом поясе UTC.
	LastBuyDate  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_buy_date,json=lastBuyDate,proto3" json:"last_buy_date,omitempty"`  //Последний день (включительно) покупки для получения выплаты в часовом поясе UTC.
	DividendType string               `protobuf:"bytes,5,opt,name=dividend_type,json=dividendType,proto3" json:"dividend_type,omitempty"` //Тип выплаты. Возможные значения: Regular Cash – регулярные выплаты, Cancelled – выплата отменена, Daily Accrual – ежедневное начисление, Return of Capital – возврат капитала, прочие типы выплат.
	RecordDate   *timestamp.Timestamp `protobuf:"bytes,6,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`       //Дата фиксации реестра в часовом поясе UTC.
	Regularity   string               `protobuf:"bytes,7,opt,name=regularity,proto3" json:"regularity,omitempty"`                         //Регулярность выплаты. Возможные значения: Annual – ежегодная, Semi-Anl – каждые полгода, прочие типы выплат.
	ClosePrice   *MoneyValue          `protobuf:"bytes,8,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`       //Цена закрытия инструмента на момент ex_dividend_date.
	YieldValue   *Quotation           `protobuf:"bytes,9,opt,name=yield_value,json=yieldValue,proto3" json:"yield_value,omitempty"`       //Величина доходности.
	CreatedAt    *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`         //Дата и время создания записи в часовом поясе UTC.
}

func (x *Dividend) Reset() {
	*x = Dividend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dividend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dividend) ProtoMessage() {}

func (x *Dividend) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dividend.ProtoReflect.Descriptor instead.
func (*Dividend) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{33}
}

func (x *Dividend) GetDividendNet() *MoneyValue {
	if x != nil {
		return x.DividendNet
	}
	return nil
}

func (x *Dividend) GetPaymentDate() *timestamp.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *Dividend) GetDeclaredDate() *timestamp.Timestamp {
	if x != nil {
		return x.DeclaredDate
	}
	return nil
}

func (x *Dividend) GetLastBuyDate() *timestamp.Timestamp {
	if x != nil {
		return x.LastBuyDate
	}
	return nil
}

func (x *Dividend) GetDividendType() string {
	if x != nil {
		return x.DividendType
	}
	return ""
}

func (x *Dividend) GetRecordDate() *timestamp.Timestamp {
	if x != nil {
		return x.RecordDate
	}
	return nil
}

func (x *Dividend) GetRegularity() string {
	if x != nil {
		return x.Regularity
	}
	return ""
}

func (x *Dividend) GetClosePrice() *MoneyValue {
	if x != nil {
		return x.ClosePrice
	}
	return nil
}

func (x *Dividend) GetYieldValue() *Quotation {
	if x != nil {
		return x.YieldValue
	}
	return nil
}

func (x *Dividend) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

//Запрос актива по идентификатору.
type AssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //uid-идентификатор актива.
}

func (x *AssetRequest) Reset() {
	*x = AssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRequest) ProtoMessage() {}

func (x *AssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRequest.ProtoReflect.Descriptor instead.
func (*AssetRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{34}
}

func (x *AssetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//Данные по активу.
type AssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset *AssetFull `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"` //Актив.
}

func (x *AssetResponse) Reset() {
	*x = AssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetResponse) ProtoMessage() {}

func (x *AssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetResponse.ProtoReflect.Descriptor instead.
func (*AssetResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{35}
}

func (x *AssetResponse) GetAsset() *AssetFull {
	if x != nil {
		return x.Asset
	}
	return nil
}

//Запрос списка активов.
type AssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssetsRequest) Reset() {
	*x = AssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsRequest) ProtoMessage() {}

func (x *AssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsRequest.ProtoReflect.Descriptor instead.
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{36}
}

//Список активов.
type AssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"` //Активы.
}

func (x *AssetsResponse) Reset() {
	*x = AssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsResponse) ProtoMessage() {}

func (x *AssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsResponse.ProtoReflect.Descriptor instead.
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{37}
}

func (x *AssetsResponse) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type AssetFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                         //Уникальный идентификатор актива.
	Type          AssetType            `protobuf:"varint,2,opt,name=type,proto3,enum=tinkoff.public.invest.api.contract.v1.AssetType" json:"type,omitempty"` //Тип актива.
	Name          string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                       //Наименование актива.
	NameBrief     string               `protobuf:"bytes,4,opt,name=name_brief,json=nameBrief,proto3" json:"name_brief,omitempty"`                            //Короткое наименование актива.
	Description   string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                         //Описание актива.
	DeletedAt     *timestamp.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`                            //Дата и время удаления актива.
	RequiredTests []string             `protobuf:"bytes,7,rep,name=required_tests,json=requiredTests,proto3" json:"required_tests,omitempty"`                //Тестирование клиентов.
	// Types that are assignable to Ext:
	//	*AssetFull_Currency
	//	*AssetFull_Security
	Ext         isAssetFull_Ext      `protobuf_oneof:"ext"`
	GosRegCode  string               `protobuf:"bytes,10,opt,name=gos_reg_code,json=gosRegCode,proto3" json:"gos_reg_code,omitempty"` //Номер государственной регистрации.
	Cfi         string               `protobuf:"bytes,11,opt,name=cfi,proto3" json:"cfi,omitempty"`                                   //Код CFI.
	CodeNsd     string               `protobuf:"bytes,12,opt,name=code_nsd,json=codeNsd,proto3" json:"code_nsd,omitempty"`            //Код НРД инструмента.
	Status      string               `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`                             //Статус актива.
	Brand       *Brand               `protobuf:"bytes,14,opt,name=brand,proto3" json:"brand,omitempty"`                               //Бренд.
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      //Дата и время последнего обновления записи.
	BrCode      string               `protobuf:"bytes,16,opt,name=br_code,json=brCode,proto3" json:"br_code,omitempty"`               //Код типа ц.б. по классификации Банка России.
	BrCodeName  string               `protobuf:"bytes,17,opt,name=br_code_name,json=brCodeName,proto3" json:"br_code_name,omitempty"` //Наименование кода типа ц.б. по классификации Банка России.
	Instruments []*AssetInstrument   `protobuf:"bytes,18,rep,name=instruments,proto3" json:"instruments,omitempty"`                   //Массив идентификаторов инструментов.
}

func (x *AssetFull) Reset() {
	*x = AssetFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetFull) ProtoMessage() {}

func (x *AssetFull) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetFull.ProtoReflect.Descriptor instead.
func (*AssetFull) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{38}
}

func (x *AssetFull) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AssetFull) GetType() AssetType {
	if x != nil {
		return x.Type
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (x *AssetFull) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetFull) GetNameBrief() string {
	if x != nil {
		return x.NameBrief
	}
	return ""
}

func (x *AssetFull) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AssetFull) GetDeletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *AssetFull) GetRequiredTests() []string {
	if x != nil {
		return x.RequiredTests
	}
	return nil
}

func (m *AssetFull) GetExt() isAssetFull_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (x *AssetFull) GetCurrency() *AssetCurrency {
	if x, ok := x.GetExt().(*AssetFull_Currency); ok {
		return x.Currency
	}
	return nil
}

func (x *AssetFull) GetSecurity() *AssetSecurity {
	if x, ok := x.GetExt().(*AssetFull_Security); ok {
		return x.Security
	}
	return nil
}

func (x *AssetFull) GetGosRegCode() string {
	if x != nil {
		return x.GosRegCode
	}
	return ""
}

func (x *AssetFull) GetCfi() string {
	if x != nil {
		return x.Cfi
	}
	return ""
}

func (x *AssetFull) GetCodeNsd() string {
	if x != nil {
		return x.CodeNsd
	}
	return ""
}

func (x *AssetFull) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AssetFull) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *AssetFull) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AssetFull) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *AssetFull) GetBrCodeName() string {
	if x != nil {
		return x.BrCodeName
	}
	return ""
}

func (x *AssetFull) GetInstruments() []*AssetInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type isAssetFull_Ext interface {
	isAssetFull_Ext()
}

type AssetFull_Currency struct {
	Currency *AssetCurrency `protobuf:"bytes,8,opt,name=currency,proto3,oneof"` //Валюта. Обязательно и заполняется только для type = "ASSET_TYPE_CURRENCY".
}

type AssetFull_Security struct {
	Security *AssetSecurity `protobuf:"bytes,9,opt,name=security,proto3,oneof"` //Ценная бумага. Обязательно и заполняется только для type = "ASSET_TYPE_SECURITY".
}

func (*AssetFull_Currency) isAssetFull_Ext() {}

func (*AssetFull_Security) isAssetFull_Ext() {}

//Информация об активе.
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string             `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                         //Уникальный идентификатор актива.
	Type        AssetType          `protobuf:"varint,2,opt,name=type,proto3,enum=tinkoff.public.invest.api.contract.v1.AssetType" json:"type,omitempty"` //Тип актива.
	Name        string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                       //Наименование актива.
	Instruments []*AssetInstrument `protobuf:"bytes,4,rep,name=instruments,proto3" json:"instruments,omitempty"`                                         //Массив идентификаторов инструментов.
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{39}
}

func (x *Asset) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Asset) GetType() AssetType {
	if x != nil {
		return x.Type
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetInstruments() []*AssetInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Валюта.
type AssetCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCurrency string `protobuf:"bytes,1,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"` //ISO-код валюты.
}

func (x *AssetCurrency) Reset() {
	*x = AssetCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetCurrency) ProtoMessage() {}

func (x *AssetCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetCurrency.ProtoReflect.Descriptor instead.
func (*AssetCurrency) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{40}
}

func (x *AssetCurrency) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

//Ценная бумага.
type AssetSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isin string `protobuf:"bytes,1,opt,name=isin,proto3" json:"isin,omitempty"` //ISIN-идентификатор ценной бумаги.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` //Тип ценной бумаги.
	// Types that are assignable to Ext:
	//	*AssetSecurity_Share
	//	*AssetSecurity_Bond
	//	*AssetSecurity_Sp
	//	*AssetSecurity_Etf
	//	*AssetSecurity_ClearingCertificate
	Ext isAssetSecurity_Ext `protobuf_oneof:"ext"`
}

func (x *AssetSecurity) Reset() {
	*x = AssetSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSecurity) ProtoMessage() {}

func (x *AssetSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSecurity.ProtoReflect.Descriptor instead.
func (*AssetSecurity) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{41}
}

func (x *AssetSecurity) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *AssetSecurity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *AssetSecurity) GetExt() isAssetSecurity_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (x *AssetSecurity) GetShare() *AssetShare {
	if x, ok := x.GetExt().(*AssetSecurity_Share); ok {
		return x.Share
	}
	return nil
}

func (x *AssetSecurity) GetBond() *AssetBond {
	if x, ok := x.GetExt().(*AssetSecurity_Bond); ok {
		return x.Bond
	}
	return nil
}

func (x *AssetSecurity) GetSp() *AssetStructuredProduct {
	if x, ok := x.GetExt().(*AssetSecurity_Sp); ok {
		return x.Sp
	}
	return nil
}

func (x *AssetSecurity) GetEtf() *AssetEtf {
	if x, ok := x.GetExt().(*AssetSecurity_Etf); ok {
		return x.Etf
	}
	return nil
}

func (x *AssetSecurity) GetClearingCertificate() *AssetClearingCertificate {
	if x, ok := x.GetExt().(*AssetSecurity_ClearingCertificate); ok {
		return x.ClearingCertificate
	}
	return nil
}

type isAssetSecurity_Ext interface {
	isAssetSecurity_Ext()
}

type AssetSecurity_Share struct {
	Share *AssetShare `protobuf:"bytes,3,opt,name=share,proto3,oneof"` //Акция. Заполняется только для акций (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = share).
}

type AssetSecurity_Bond struct {
	Bond *AssetBond `protobuf:"bytes,4,opt,name=bond,proto3,oneof"` //Облигация. Заполняется только для облигаций (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = bond).
}

type AssetSecurity_Sp struct {
	Sp *AssetStructuredProduct `protobuf:"bytes,5,opt,name=sp,proto3,oneof"` //Структурная нота. Заполняется только для структурных продуктов (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = sp).
}

type AssetSecurity_Etf struct {
	Etf *AssetEtf `protobuf:"bytes,6,opt,name=etf,proto3,oneof"` // Фонд. Заполняется только для фондов (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = etf).
}

type AssetSecurity_ClearingCertificate struct {
	ClearingCertificate *AssetClearingCertificate `protobuf:"bytes,7,opt,name=clearing_certificate,json=clearingCertificate,proto3,oneof"` // Клиринговый сертификат участия. Заполняется только для клиринговых сертификатов (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = clearing_certificate).
}

func (*AssetSecurity_Share) isAssetSecurity_Ext() {}

func (*AssetSecurity_Bond) isAssetSecurity_Ext() {}

func (*AssetSecurity_Sp) isAssetSecurity_Ext() {}

func (*AssetSecurity_Etf) isAssetSecurity_Ext() {}

func (*AssetSecurity_ClearingCertificate) isAssetSecurity_Ext() {}

//Акция.
type AssetShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               ShareType            `protobuf:"varint,1,opt,name=type,proto3,enum=tinkoff.public.invest.api.contract.v1.ShareType" json:"type,omitempty"`   //Тип акции.
	IssueSize          *Quotation           `protobuf:"bytes,2,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                              //Объем выпуска (шт.).
	Nominal            *Quotation           `protobuf:"bytes,3,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                   //Номинал.
	NominalCurrency    string               `protobuf:"bytes,4,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`            //Валюта номинала.
	PrimaryIndex       string               `protobuf:"bytes,5,opt,name=primary_index,json=primaryIndex,proto3" json:"primary_index,omitempty"`                     //Индекс (Bloomberg).
	DividendRate       *Quotation           `protobuf:"bytes,6,opt,name=dividend_rate,json=dividendRate,proto3" json:"dividend_rate,omitempty"`                     //Ставка дивиденда (для привилегированных акций).
	PreferredShareType string               `protobuf:"bytes,7,opt,name=preferred_share_type,json=preferredShareType,proto3" json:"preferred_share_type,omitempty"` //Тип привилегированных акций.
	IpoDate            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=ipo_date,json=ipoDate,proto3" json:"ipo_date,omitempty"`                                    //Дата IPO.
	RegistryDate       *timestamp.Timestamp `protobuf:"bytes,9,opt,name=registry_date,json=registryDate,proto3" json:"registry_date,omitempty"`                     //Дата регистрации.
	DivYieldFlag       bool                 `protobuf:"varint,10,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`                 //Признак наличия дивидендной доходности.
	IssueKind          string               `protobuf:"bytes,11,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                             //Форма выпуска ФИ.
	PlacementDate      *timestamp.Timestamp `protobuf:"bytes,12,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`                 //Дата размещения акции.
	RepresIsin         string               `protobuf:"bytes,13,opt,name=repres_isin,json=represIsin,proto3" json:"repres_isin,omitempty"`                          //ISIN базового актива.
	IssueSizePlan      *Quotation           `protobuf:"bytes,14,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`               //Объявленное количество шт.
	TotalFloat         *Quotation           `protobuf:"bytes,15,opt,name=total_float,json=totalFloat,proto3" json:"total_float,omitempty"`                          //Количество акций в свободном обращении.
}

func (x *AssetShare) Reset() {
	*x = AssetShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetShare) ProtoMessage() {}

func (x *AssetShare) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetShare.ProtoReflect.Descriptor instead.
func (*AssetShare) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{42}
}

func (x *AssetShare) GetType() ShareType {
	if x != nil {
		return x.Type
	}
	return ShareType_SHARE_TYPE_UNSPECIFIED
}

func (x *AssetShare) GetIssueSize() *Quotation {
	if x != nil {
		return x.IssueSize
	}
	return nil
}

func (x *AssetShare) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetShare) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

func (x *AssetShare) GetPrimaryIndex() string {
	if x != nil {
		return x.PrimaryIndex
	}
	return ""
}

func (x *AssetShare) GetDividendRate() *Quotation {
	if x != nil {
		return x.DividendRate
	}
	return nil
}

func (x *AssetShare) GetPreferredShareType() string {
	if x != nil {
		return x.PreferredShareType
	}
	return ""
}

func (x *AssetShare) GetIpoDate() *timestamp.Timestamp {
	if x != nil {
		return x.IpoDate
	}
	return nil
}

func (x *AssetShare) GetRegistryDate() *timestamp.Timestamp {
	if x != nil {
		return x.RegistryDate
	}
	return nil
}

func (x *AssetShare) GetDivYieldFlag() bool {
	if x != nil {
		return x.DivYieldFlag
	}
	return false
}

func (x *AssetShare) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

func (x *AssetShare) GetPlacementDate() *timestamp.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *AssetShare) GetRepresIsin() string {
	if x != nil {
		return x.RepresIsin
	}
	return ""
}

func (x *AssetShare) GetIssueSizePlan() *Quotation {
	if x != nil {
		return x.IssueSizePlan
	}
	return nil
}

func (x *AssetShare) GetTotalFloat() *Quotation {
	if x != nil {
		return x.TotalFloat
	}
	return nil
}

//Облигация.
type AssetBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentNominal        *Quotation           `protobuf:"bytes,1,opt,name=current_nominal,json=currentNominal,proto3" json:"current_nominal,omitempty"`                           //Текущий номинал.
	BorrowName            string               `protobuf:"bytes,2,opt,name=borrow_name,json=borrowName,proto3" json:"borrow_name,omitempty"`                                       //Наименование заемщика.
	IssueSize             *Quotation           `protobuf:"bytes,3,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                                          //Объем эмиссии облигации (стоимость).
	Nominal               *Quotation           `protobuf:"bytes,4,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                               //Номинал облигации.
	NominalCurrency       string               `protobuf:"bytes,5,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`                        //Валюта номинала.
	IssueKind             string               `protobuf:"bytes,6,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                                          //Форма выпуска облигации.
	InterestKind          string               `protobuf:"bytes,7,opt,name=interest_kind,json=interestKind,proto3" json:"interest_kind,omitempty"`                                 //Форма дохода облигации.
	CouponQuantityPerYear int32                `protobuf:"varint,8,opt,name=coupon_quantity_per_year,json=couponQuantityPerYear,proto3" json:"coupon_quantity_per_year,omitempty"` //Количество выплат в год.
	IndexedNominalFlag    bool                 `protobuf:"varint,9,opt,name=indexed_nominal_flag,json=indexedNominalFlag,proto3" json:"indexed_nominal_flag,omitempty"`            //Признак облигации с индексируемым номиналом.
	SubordinatedFlag      bool                 `protobuf:"varint,10,opt,name=subordinated_flag,json=subordinatedFlag,proto3" json:"subordinated_flag,omitempty"`                   //Признак субординированной облигации.
	CollateralFlag        bool                 `protobuf:"varint,11,opt,name=collateral_flag,json=collateralFlag,proto3" json:"collateral_flag,omitempty"`                         //Признак обеспеченной облигации.
	TaxFreeFlag           bool                 `protobuf:"varint,12,opt,name=tax_free_flag,json=taxFreeFlag,proto3" json:"tax_free_flag,omitempty"`                                //Признак показывает, что купоны облигации не облагаются налогом (для mass market).
	AmortizationFlag      bool                 `protobuf:"varint,13,opt,name=amortization_flag,json=amortizationFlag,proto3" json:"amortization_flag,omitempty"`                   //Признак облигации с амортизацией долга.
	FloatingCouponFlag    bool                 `protobuf:"varint,14,opt,name=floating_coupon_flag,json=floatingCouponFlag,proto3" json:"floating_coupon_flag,omitempty"`           //Признак облигации с плавающим купоном.
	PerpetualFlag         bool                 `protobuf:"varint,15,opt,name=perpetual_flag,json=perpetualFlag,proto3" json:"perpetual_flag,omitempty"`                            //Признак бессрочной облигации.
	MaturityDate          *timestamp.Timestamp `protobuf:"bytes,16,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`                                //Дата погашения облигации.
	ReturnCondition       string               `protobuf:"bytes,17,opt,name=return_condition,json=returnCondition,proto3" json:"return_condition,omitempty"`                       //Описание и условия получения дополнительного дохода.
	StateRegDate          *timestamp.Timestamp `protobuf:"bytes,18,opt,name=state_reg_date,json=stateRegDate,proto3" json:"state_reg_date,omitempty"`                              //Дата выпуска облигации.
	PlacementDate         *timestamp.Timestamp `protobuf:"bytes,19,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`                             //Дата размещения облигации.
	PlacementPrice        *Quotation           `protobuf:"bytes,20,opt,name=placement_price,json=placementPrice,proto3" json:"placement_price,omitempty"`                          //Цена размещения облигации.
	IssueSizePlan         *Quotation           `protobuf:"bytes,21,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`                           //Объявленное количество шт.
}

func (x *AssetBond) Reset() {
	*x = AssetBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetBond) ProtoMessage() {}

func (x *AssetBond) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetBond.ProtoReflect.Descriptor instead.
func (*AssetBond) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{43}
}

func (x *AssetBond) GetCurrentNominal() *Quotation {
	if x != nil {
		return x.CurrentNominal
	}
	return nil
}

func (x *AssetBond) GetBorrowName() string {
	if x != nil {
		return x.BorrowName
	}
	return ""
}

func (x *AssetBond) GetIssueSize() *Quotation {
	if x != nil {
		return x.IssueSize
	}
	return nil
}

func (x *AssetBond) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetBond) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

func (x *AssetBond) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

func (x *AssetBond) GetInterestKind() string {
	if x != nil {
		return x.InterestKind
	}
	return ""
}

func (x *AssetBond) GetCouponQuantityPerYear() int32 {
	if x != nil {
		return x.CouponQuantityPerYear
	}
	return 0
}

func (x *AssetBond) GetIndexedNominalFlag() bool {
	if x != nil {
		return x.IndexedNominalFlag
	}
	return false
}

func (x *AssetBond) GetSubordinatedFlag() bool {
	if x != nil {
		return x.SubordinatedFlag
	}
	return false
}

func (x *AssetBond) GetCollateralFlag() bool {
	if x != nil {
		return x.CollateralFlag
	}
	return false
}

func (x *AssetBond) GetTaxFreeFlag() bool {
	if x != nil {
		return x.TaxFreeFlag
	}
	return false
}

func (x *AssetBond) GetAmortizationFlag() bool {
	if x != nil {
		return x.AmortizationFlag
	}
	return false
}

func (x *AssetBond) GetFloatingCouponFlag() bool {
	if x != nil {
		return x.FloatingCouponFlag
	}
	return false
}

func (x *AssetBond) GetPerpetualFlag() bool {
	if x != nil {
		return x.PerpetualFlag
	}
	return false
}

func (x *AssetBond) GetMaturityDate() *timestamp.Timestamp {
	if x != nil {
		return x.MaturityDate
	}
	return nil
}

func (x *AssetBond) GetReturnCondition() string {
	if x != nil {
		return x.ReturnCondition
	}
	return ""
}

func (x *AssetBond) GetStateRegDate() *timestamp.Timestamp {
	if x != nil {
		return x.StateRegDate
	}
	return nil
}

func (x *AssetBond) GetPlacementDate() *timestamp.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *AssetBond) GetPlacementPrice() *Quotation {
	if x != nil {
		return x.PlacementPrice
	}
	return nil
}

func (x *AssetBond) GetIssueSizePlan() *Quotation {
	if x != nil {
		return x.IssueSizePlan
	}
	return nil
}

//Структурная нота.
type AssetStructuredProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BorrowName      string                `protobuf:"bytes,1,opt,name=borrow_name,json=borrowName,proto3" json:"borrow_name,omitempty"`                                                    //Наименование заемщика.
	Nominal         *Quotation            `protobuf:"bytes,2,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                            //Номинал.
	NominalCurrency string                `protobuf:"bytes,3,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`                                     //Валюта номинала.
	Type            StructuredProductType `protobuf:"varint,4,opt,name=type,proto3,enum=tinkoff.public.invest.api.contract.v1.StructuredProductType" json:"type,omitempty"`                //Тип структурной ноты.
	LogicPortfolio  string                `protobuf:"bytes,5,opt,name=logic_portfolio,json=logicPortfolio,proto3" json:"logic_portfolio,omitempty"`                                        //Стратегия портфеля.
	AssetType       AssetType             `protobuf:"varint,6,opt,name=asset_type,json=assetType,proto3,enum=tinkoff.public.invest.api.contract.v1.AssetType" json:"asset_type,omitempty"` //Тип базового актива.
	BasicAsset      string                `protobuf:"bytes,7,opt,name=basic_asset,json=basicAsset,proto3" json:"basic_asset,omitempty"`                                                    //Вид базового актива в зависимости от типа базового актива.
	SafetyBarrier   *Quotation            `protobuf:"bytes,8,opt,name=safety_barrier,json=safetyBarrier,proto3" json:"safety_barrier,omitempty"`                                           //Барьер сохранности (в процентах).
	MaturityDate    *timestamp.Timestamp  `protobuf:"bytes,9,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`                                              //Дата погашения.
	IssueSizePlan   *Quotation            `protobuf:"bytes,10,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`                                        //Объявленное количество шт.
	IssueSize       *Quotation            `protobuf:"bytes,11,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                                                      //Объем размещения.
	PlacementDate   *timestamp.Timestamp  `protobuf:"bytes,12,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`                                          //Дата размещения ноты.
	IssueKind       string                `protobuf:"bytes,13,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                                                      //Форма выпуска.
}

func (x *AssetStructuredProduct) Reset() {
	*x = AssetStructuredProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetStructuredProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetStructuredProduct) ProtoMessage() {}

func (x *AssetStructuredProduct) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetStructuredProduct.ProtoReflect.Descriptor instead.
func (*AssetStructuredProduct) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{44}
}

func (x *AssetStructuredProduct) GetBorrowName() string {
	if x != nil {
		return x.BorrowName
	}
	return ""
}

func (x *AssetStructuredProduct) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetStructuredProduct) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

func (x *AssetStructuredProduct) GetType() StructuredProductType {
	if x != nil {
		return x.Type
	}
	return StructuredProductType_SP_TYPE_UNSPECIFIED
}

func (x *AssetStructuredProduct) GetLogicPortfolio() string {
	if x != nil {
		return x.LogicPortfolio
	}
	return ""
}

func (x *AssetStructuredProduct) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (x *AssetStructuredProduct) GetBasicAsset() string {
	if x != nil {
		return x.BasicAsset
	}
	return ""
}

func (x *AssetStructuredProduct) GetSafetyBarrier() *Quotation {
	if x != nil {
		return x.SafetyBarrier
	}
	return nil
}

func (x *AssetStructuredProduct) GetMaturityDate() *timestamp.Timestamp {
	if x != nil {
		return x.MaturityDate
	}
	return nil
}

func (x *AssetStructuredProduct) GetIssueSizePlan() *Quotation {
	if x != nil {
		return x.IssueSizePlan
	}
	return nil
}

func (x *AssetStructuredProduct) GetIssueSize() *Quotation {
	if x != nil {
		return x.IssueSize
	}
	return nil
}

func (x *AssetStructuredProduct) GetPlacementDate() *timestamp.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *AssetStructuredProduct) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

//Фонд.
type AssetEtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalExpense              *Quotation             `protobuf:"bytes,1,opt,name=total_expense,json=totalExpense,proto3" json:"total_expense,omitempty"`                                             //Суммарные расходы фонда (в %).
	HurdleRate                *Quotation             `protobuf:"bytes,2,opt,name=hurdle_rate,json=hurdleRate,proto3" json:"hurdle_rate,omitempty"`                                                   //Барьерная ставка доходности после которой фонд имеет право на perfomance fee (в процентах).
	PerformanceFee            *Quotation             `protobuf:"bytes,3,opt,name=performance_fee,json=performanceFee,proto3" json:"performance_fee,omitempty"`                                       //Комиссия за успешные результаты фонда (в процентах).
	FixedCommission           *Quotation             `protobuf:"bytes,4,opt,name=fixed_commission,json=fixedCommission,proto3" json:"fixed_commission,omitempty"`                                    //Фиксированная комиссия за управление (в процентах).
	PaymentType               string                 `protobuf:"bytes,5,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`                                                //Тип распределения доходов от выплат по бумагам.
	WatermarkFlag             bool                   `protobuf:"varint,6,opt,name=watermark_flag,json=watermarkFlag,proto3" json:"watermark_flag,omitempty"`                                         //Признак необходимости выхода фонда в плюс для получения комиссии.
	BuyPremium                *Quotation             `protobuf:"bytes,7,opt,name=buy_premium,json=buyPremium,proto3" json:"buy_premium,omitempty"`                                                   //Премия (надбавка к цене) при покупке доли в фонде (в процентах).
	SellDiscount              *Quotation             `protobuf:"bytes,8,opt,name=sell_discount,json=sellDiscount,proto3" json:"sell_discount,omitempty"`                                             //Ставка дисконта (вычет из цены) при продаже доли в фонде (в процентах).
	RebalancingFlag           bool                   `protobuf:"varint,9,opt,name=rebalancing_flag,json=rebalancingFlag,proto3" json:"rebalancing_flag,omitempty"`                                   //Признак ребалансируемости портфеля фонда.
	RebalancingFreq           string                 `protobuf:"bytes,10,opt,name=rebalancing_freq,json=rebalancingFreq,proto3" json:"rebalancing_freq,omitempty"`                                   //Периодичность ребалансировки.
	ManagementType            string                 `protobuf:"bytes,11,opt,name=management_type,json=managementType,proto3" json:"management_type,omitempty"`                                      //Тип управления.
	PrimaryIndex              string                 `protobuf:"bytes,12,opt,name=primary_index,json=primaryIndex,proto3" json:"primary_index,omitempty"`                                            //Индекс, который реплицирует (старается копировать) фонд.
	FocusType                 string                 `protobuf:"bytes,13,opt,name=focus_type,json=focusType,proto3" json:"focus_type,omitempty"`                                                     //База ETF.
	LeveragedFlag             bool                   `protobuf:"varint,14,opt,name=leveraged_flag,json=leveragedFlag,proto3" json:"leveraged_flag,omitempty"`                                        //Признак использования заемных активов (плечо).
	NumShare                  *Quotation             `protobuf:"bytes,15,opt,name=num_share,json=numShare,proto3" json:"num_share,omitempty"`                                                        //Количество акций в обращении.
	UcitsFlag                 bool                   `protobuf:"varint,16,opt,name=ucits_flag,json=ucitsFlag,proto3" json:"ucits_flag,omitempty"`                                                    //Признак обязательства по отчетности перед регулятором.
	ReleasedDate              *timestamp.Timestamp   `protobuf:"bytes,17,opt,name=released_date,json=releasedDate,proto3" json:"released_date,omitempty"`                                            //Дата выпуска.
	Description               string                 `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`                                                                  //Описание фонда.
	PrimaryIndexDescription   string                 `protobuf:"bytes,19,opt,name=primary_index_description,json=primaryIndexDescription,proto3" json:"primary_index_description,omitempty"`         //Описание индекса, за которым следует фонд.
	PrimaryIndexCompany       string                 `protobuf:"bytes,20,opt,name=primary_index_company,json=primaryIndexCompany,proto3" json:"primary_index_company,omitempty"`                     //Основные компании, в которые вкладывается фонд.
	IndexRecoveryPeriod       *Quotation             `protobuf:"bytes,21,opt,name=index_recovery_period,json=indexRecoveryPeriod,proto3" json:"index_recovery_period,omitempty"`                     //Срок восстановления индекса (после просадки).
	InavCode                  string                 `protobuf:"bytes,22,opt,name=inav_code,json=inavCode,proto3" json:"inav_code,omitempty"`                                                        //IVAV-код.
	DivYieldFlag              bool                   `protobuf:"varint,23,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`                                         //Признак наличия дивидендной доходности.
	ExpenseCommission         *Quotation             `protobuf:"bytes,24,opt,name=expense_commission,json=expenseCommission,proto3" json:"expense_commission,omitempty"`                             //Комиссия на покрытие расходов фонда (в процентах).
	PrimaryIndexTrackingError *Quotation             `protobuf:"bytes,25,opt,name=primary_index_tracking_error,json=primaryIndexTrackingError,proto3" json:"primary_index_tracking_error,omitempty"` //Ошибка следования за индексом (в процентах).
	RebalancingPlan           string                 `protobuf:"bytes,26,opt,name=rebalancing_plan,json=rebalancingPlan,proto3" json:"rebalancing_plan,omitempty"`                                   //Плановая ребалансировка портфеля.
	TaxRate                   string                 `protobuf:"bytes,27,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`                                                           //Ставки налогообложения дивидендов и купонов.
	RebalancingDates          []*timestamp.Timestamp `protobuf:"bytes,28,rep,name=rebalancing_dates,json=rebalancingDates,proto3" json:"rebalancing_dates,omitempty"`                                //Даты ребалансировок.
	IssueKind                 string                 `protobuf:"bytes,29,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                                                     //Форма выпуска.
	Nominal                   *Quotation             `protobuf:"bytes,30,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                          //Номинал.
	NominalCurrency           string                 `protobuf:"bytes,31,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"`                                   //Валюта номинала.
}

func (x *AssetEtf) Reset() {
	*x = AssetEtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetEtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetEtf) ProtoMessage() {}

func (x *AssetEtf) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetEtf.ProtoReflect.Descriptor instead.
func (*AssetEtf) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{45}
}

func (x *AssetEtf) GetTotalExpense() *Quotation {
	if x != nil {
		return x.TotalExpense
	}
	return nil
}

func (x *AssetEtf) GetHurdleRate() *Quotation {
	if x != nil {
		return x.HurdleRate
	}
	return nil
}

func (x *AssetEtf) GetPerformanceFee() *Quotation {
	if x != nil {
		return x.PerformanceFee
	}
	return nil
}

func (x *AssetEtf) GetFixedCommission() *Quotation {
	if x != nil {
		return x.FixedCommission
	}
	return nil
}

func (x *AssetEtf) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *AssetEtf) GetWatermarkFlag() bool {
	if x != nil {
		return x.WatermarkFlag
	}
	return false
}

func (x *AssetEtf) GetBuyPremium() *Quotation {
	if x != nil {
		return x.BuyPremium
	}
	return nil
}

func (x *AssetEtf) GetSellDiscount() *Quotation {
	if x != nil {
		return x.SellDiscount
	}
	return nil
}

func (x *AssetEtf) GetRebalancingFlag() bool {
	if x != nil {
		return x.RebalancingFlag
	}
	return false
}

func (x *AssetEtf) GetRebalancingFreq() string {
	if x != nil {
		return x.RebalancingFreq
	}
	return ""
}

func (x *AssetEtf) GetManagementType() string {
	if x != nil {
		return x.ManagementType
	}
	return ""
}

func (x *AssetEtf) GetPrimaryIndex() string {
	if x != nil {
		return x.PrimaryIndex
	}
	return ""
}

func (x *AssetEtf) GetFocusType() string {
	if x != nil {
		return x.FocusType
	}
	return ""
}

func (x *AssetEtf) GetLeveragedFlag() bool {
	if x != nil {
		return x.LeveragedFlag
	}
	return false
}

func (x *AssetEtf) GetNumShare() *Quotation {
	if x != nil {
		return x.NumShare
	}
	return nil
}

func (x *AssetEtf) GetUcitsFlag() bool {
	if x != nil {
		return x.UcitsFlag
	}
	return false
}

func (x *AssetEtf) GetReleasedDate() *timestamp.Timestamp {
	if x != nil {
		return x.ReleasedDate
	}
	return nil
}

func (x *AssetEtf) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AssetEtf) GetPrimaryIndexDescription() string {
	if x != nil {
		return x.PrimaryIndexDescription
	}
	return ""
}

func (x *AssetEtf) GetPrimaryIndexCompany() string {
	if x != nil {
		return x.PrimaryIndexCompany
	}
	return ""
}

func (x *AssetEtf) GetIndexRecoveryPeriod() *Quotation {
	if x != nil {
		return x.IndexRecoveryPeriod
	}
	return nil
}

func (x *AssetEtf) GetInavCode() string {
	if x != nil {
		return x.InavCode
	}
	return ""
}

func (x *AssetEtf) GetDivYieldFlag() bool {
	if x != nil {
		return x.DivYieldFlag
	}
	return false
}

func (x *AssetEtf) GetExpenseCommission() *Quotation {
	if x != nil {
		return x.ExpenseCommission
	}
	return nil
}

func (x *AssetEtf) GetPrimaryIndexTrackingError() *Quotation {
	if x != nil {
		return x.PrimaryIndexTrackingError
	}
	return nil
}

func (x *AssetEtf) GetRebalancingPlan() string {
	if x != nil {
		return x.RebalancingPlan
	}
	return ""
}

func (x *AssetEtf) GetTaxRate() string {
	if x != nil {
		return x.TaxRate
	}
	return ""
}

func (x *AssetEtf) GetRebalancingDates() []*timestamp.Timestamp {
	if x != nil {
		return x.RebalancingDates
	}
	return nil
}

func (x *AssetEtf) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

func (x *AssetEtf) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetEtf) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

//Клиринговый сертификат участия.
type AssetClearingCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nominal         *Quotation `protobuf:"bytes,1,opt,name=nominal,proto3" json:"nominal,omitempty"`                                        //Номинал.
	NominalCurrency string     `protobuf:"bytes,2,opt,name=nominal_currency,json=nominalCurrency,proto3" json:"nominal_currency,omitempty"` //Валюта номинала.
}

func (x *AssetClearingCertificate) Reset() {
	*x = AssetClearingCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetClearingCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetClearingCertificate) ProtoMessage() {}

func (x *AssetClearingCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetClearingCertificate.ProtoReflect.Descriptor instead.
func (*AssetClearingCertificate) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{46}
}

func (x *AssetClearingCertificate) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *AssetClearingCertificate) GetNominalCurrency() string {
	if x != nil {
		return x.NominalCurrency
	}
	return ""
}

//Бренд.
type Brand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                          //uid идентификатор бренда.
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                        //Наименование бренда.
	Description       string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                          //Описание.
	Info              string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`                                                        //Информация о бренде.
	Company           string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`                                                  //Компания.
	Sector            string `protobuf:"bytes,6,opt,name=sector,proto3" json:"sector,omitempty"`                                                    //Сектор.
	CountryOfRisk     string `protobuf:"bytes,7,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`               //Код страны риска.
	CountryOfRiskName string `protobuf:"bytes,8,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"` //Наименование страны риска.
}

func (x *Brand) Reset() {
	*x = Brand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brand) ProtoMessage() {}

func (x *Brand) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brand.ProtoReflect.Descriptor instead.
func (*Brand) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{47}
}

func (x *Brand) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Brand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Brand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Brand) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Brand) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Brand) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Brand) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Brand) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

//Идентификаторы инструмента.
type AssetInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                             //uid идентификатор инструмента.
	Figi           string            `protobuf:"bytes,2,opt,name=figi,proto3" json:"figi,omitempty"`                                           //figi идентификатор инструмента.
	InstrumentType string            `protobuf:"bytes,3,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"` //Тип инструмента.
	Ticker         string            `protobuf:"bytes,4,opt,name=ticker,proto3" json:"ticker,omitempty"`                                       //Тикер инструмента.
	ClassCode      string            `protobuf:"bytes,5,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                //Класс-код (секция торгов).
	Links          []*InstrumentLink `protobuf:"bytes,6,rep,name=links,proto3" json:"links,omitempty"`                                         //Массив связанных инструментов.
}

func (x *AssetInstrument) Reset() {
	*x = AssetInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetInstrument) ProtoMessage() {}

func (x *AssetInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetInstrument.ProtoReflect.Descriptor instead.
func (*AssetInstrument) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{48}
}

func (x *AssetInstrument) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AssetInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *AssetInstrument) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *AssetInstrument) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *AssetInstrument) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *AssetInstrument) GetLinks() []*InstrumentLink {
	if x != nil {
		return x.Links
	}
	return nil
}

//Связь с другим инструментом.
type InstrumentLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                                        //Тип связи.
	InstrumentUid string `protobuf:"bytes,2,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"` //uid идентификатор связанного инструмента.
}

func (x *InstrumentLink) Reset() {
	*x = InstrumentLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentLink) ProtoMessage() {}

func (x *InstrumentLink) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentLink.ProtoReflect.Descriptor instead.
func (*InstrumentLink) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{49}
}

func (x *InstrumentLink) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InstrumentLink) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

//Запрос избранных инструментов.
type GetFavoritesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFavoritesRequest) Reset() {
	*x = GetFavoritesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoritesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoritesRequest) ProtoMessage() {}

func (x *GetFavoritesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoritesRequest.ProtoReflect.Descriptor instead.
func (*GetFavoritesRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{50}
}

//Ответ избранных инструментов.
type GetFavoritesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteInstruments []*FavoriteInstrument `protobuf:"bytes,1,rep,name=favorite_instruments,json=favoriteInstruments,proto3" json:"favorite_instruments,omitempty"` //Массив инструментов
}

func (x *GetFavoritesResponse) Reset() {
	*x = GetFavoritesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoritesResponse) ProtoMessage() {}

func (x *GetFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoritesResponse.ProtoReflect.Descriptor instead.
func (*GetFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{51}
}

func (x *GetFavoritesResponse) GetFavoriteInstruments() []*FavoriteInstrument {
	if x != nil {
		return x.FavoriteInstruments
	}
	return nil
}

//Избранный инструмент.
type FavoriteInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                      //Figi-идентификатор инструмента.
	Ticker                string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                  //Тикер инструмента.
	ClassCode             string `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                           //Класс-код инструмента.
	Isin                  string `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                      //Isin-идентификатор инструмента.
	InstrumentType        string `protobuf:"bytes,11,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                           //Тип инструмента.
	OtcFlag               bool   `protobuf:"varint,16,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                               //Признак внебиржевой ценной бумаги.
	ApiTradeAvailableFlag bool   `protobuf:"varint,17,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"` //Признак доступности торгов через API.
}

func (x *FavoriteInstrument) Reset() {
	*x = FavoriteInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteInstrument) ProtoMessage() {}

func (x *FavoriteInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteInstrument.ProtoReflect.Descriptor instead.
func (*FavoriteInstrument) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{52}
}

func (x *FavoriteInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *FavoriteInstrument) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *FavoriteInstrument) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *FavoriteInstrument) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *FavoriteInstrument) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *FavoriteInstrument) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *FavoriteInstrument) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

//Запрос редактирования избранных инструментов.
type EditFavoritesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*EditFavoritesRequestInstrument `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                     //Массив инструментов.
	ActionType  EditFavoritesActionType           `protobuf:"varint,6,opt,name=action_type,json=actionType,proto3,enum=tinkoff.public.invest.api.contract.v1.EditFavoritesActionType" json:"action_type,omitempty"` //Тип действия со списком.
}

func (x *EditFavoritesRequest) Reset() {
	*x = EditFavoritesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditFavoritesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFavoritesRequest) ProtoMessage() {}

func (x *EditFavoritesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFavoritesRequest.ProtoReflect.Descriptor instead.
func (*EditFavoritesRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{53}
}

func (x *EditFavoritesRequest) GetInstruments() []*EditFavoritesRequestInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *EditFavoritesRequest) GetActionType() EditFavoritesActionType {
	if x != nil {
		return x.ActionType
	}
	return EditFavoritesActionType_EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED
}

//Избранный инструмент для редактирования.
type EditFavoritesRequestInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"` //Figi-идентификатор инструмента.
}

func (x *EditFavoritesRequestInstrument) Reset() {
	*x = EditFavoritesRequestInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditFavoritesRequestInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFavoritesRequestInstrument) ProtoMessage() {}

func (x *EditFavoritesRequestInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFavoritesRequestInstrument.ProtoReflect.Descriptor instead.
func (*EditFavoritesRequestInstrument) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{54}
}

func (x *EditFavoritesRequestInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

//Результат редактирования избранных инструментов.
type EditFavoritesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteInstruments []*FavoriteInstrument `protobuf:"bytes,1,rep,name=favorite_instruments,json=favoriteInstruments,proto3" json:"favorite_instruments,omitempty"` //Массив инструментов
}

func (x *EditFavoritesResponse) Reset() {
	*x = EditFavoritesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFavoritesResponse) ProtoMessage() {}

func (x *EditFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFavoritesResponse.ProtoReflect.Descriptor instead.
func (*EditFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{55}
}

func (x *EditFavoritesResponse) GetFavoriteInstruments() []*FavoriteInstrument {
	if x != nil {
		return x.FavoriteInstruments
	}
	return nil
}

var File_instruments_proto protoreflect.FileDescriptor

var file_instruments_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x25, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x70, 0x0a,
	0x18, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0x74, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45,
	0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xb2, 0x07, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x1a,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x22, 0x65, 0x76,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x1e, 0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10,
	0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x50, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x7a, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a,
	0x0c, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x0d, 0x42, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x02, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8f, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x66, 0x69, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x4f, 0x6e, 0x65, 0x42, 0x6f,
	0x6e, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x63, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x12,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x0b, 0x45, 0x74, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x74, 0x66, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x5c, 0x0a, 0x0c, 0x45, 0x74, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74,
	0x66, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5f,
	0x0a, 0x0e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x62, 0x0a, 0x0f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x60, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xef, 0x0f, 0x0a, 0x04, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x6b, 0x6c,
	0x6f, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6b, 0x6c, 0x6f,
	0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x05,
	0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64,
	0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x4d,
	0x0a, 0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x12, 0x4f, 0x0a,
	0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x61, 0x63, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x69, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x63, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62,
	0x75, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x75, 0x79, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x6c,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xf0, 0x0a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x46, 0x0a, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6b, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x64, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67,
	0x4d, 0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66,
	0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x75, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x58, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61,
	0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xc3, 0x0c, 0x0a, 0x03, 0x45, 0x74,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c,
	0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46,
	0x0a, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x12, 0x46, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x64, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x69,
	0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d,
	0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x5b, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a,
	0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52,
	0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75,
	0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x75, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70,
	0x69, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70,
	0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x87, 0x0d, 0x0a, 0x06, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x6b,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6b,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a,
	0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x6c,
	0x6f, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52,
	0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x74, 0x63,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x62, 0x75, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x58, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61,
	0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xce, 0x0c, 0x0a, 0x05, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x46, 0x0a, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6b, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x64, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67,
	0x4d, 0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x70, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x69, 0x70, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b,
	0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x4b, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x63,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x75, 0x79, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x69, 0x76, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x4f, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x2e, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x61, 0x63, 0x63,
	0x72, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x22, 0xac,
	0x02, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x4a, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x2d, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x22, 0xb9, 0x03, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x62,
	0x75, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4f, 0x6e, 0x42, 0x75, 0x79, 0x12,
	0x66, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4f, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x1a, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x17, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xa2, 0x0a, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a,
	0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x46, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x69, 0x6e,
	0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66,
	0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62,
	0x75, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65,
	0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x6c,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x67, 0x69, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x65,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x84, 0x05, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x6e,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x62, 0x75, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x0b, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x1e, 0x0a, 0x0c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x0d,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0xc4,
	0x06, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x52, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x6f, 0x73, 0x52, 0x65,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x66, 0x69, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x66, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x73, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x4e,
	0x73, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x05,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xdd, 0x03, 0x0a, 0x0d,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x46, 0x0a, 0x04, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x02, 0x73, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x02, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x03, 0x65, 0x74, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x45, 0x74, 0x66, 0x48, 0x00, 0x52, 0x03, 0x65, 0x74, 0x66, 0x12, 0x74,
	0x0a, 0x14, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x22, 0x96, 0x07, 0x0a, 0x0a,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4f, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x4a, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x29, 0x0a,
	0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x55, 0x0a,
	0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x70, 0x6f, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x69, 0x70, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x64, 0x69, 0x76, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x59, 0x69, 0x65, 0x6c, 0x64,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x49, 0x73, 0x69, 0x6e, 0x12, 0x58, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x22, 0xa4, 0x09, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x6f,
	0x6e, 0x64, 0x12, 0x59, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f,
	0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x4a, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x61, 0x78, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6d, 0x6f, 0x72,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x58, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0xc4, 0x06, 0x0a, 0x16,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x72,
	0x72, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x50,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x4f, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x73,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x42, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x4f, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x22, 0xad, 0x0e, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x74, 0x66, 0x12,
	0x55, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x68, 0x75, 0x72, 0x64, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x68,
	0x75, 0x72, 0x64, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x51, 0x0a, 0x0b, 0x62,
	0x75, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x55,
	0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x6f, 0x63, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x4d, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x63, 0x69, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x75, 0x63, 0x69, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3f, 0x0a,
	0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x64, 0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x61, 0x76, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x76, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x76,
	0x59, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x5f, 0x0a, 0x12, 0x65, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x1c, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x4a, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xee, 0x01, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52,
	0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4b, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x4b,
	0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x14, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x12, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x74, 0x63, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xe0, 0x01, 0x0a,
	0x14, 0x45, 0x64, 0x69, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x34, 0x0a, 0x1e, 0x45, 0x64, 0x69, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6c, 0x0a, 0x14, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0xd7, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55,
	0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55, 0x50, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x52, 0x54, 0x47, 0x41, 0x47, 0x45, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x58, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x89, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x49, 0x47, 0x49, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x10, 0x03, 0x2a, 0x6c, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x02, 0x2a, 0xe5, 0x01, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x52, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x44, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4c, 0x50, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x48,
	0x52, 0x53, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x55,
	0x4e, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x49, 0x54, 0x10, 0x08, 0x2a, 0x89, 0x01, 0x0a, 0x09, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x53, 0x53, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f,
	0x44, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0x66, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x8d, 0x01,
	0x0a, 0x17, 0x45, 0x64, 0x69, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x46, 0x41,
	0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0x73, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x4f,
	0x45, 0x58, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x54, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x45, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x54, 0x43,
	0x10, 0x03, 0x32, 0xe6, 0x14, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3e,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x06, 0x42, 0x6f, 0x6e, 0x64, 0x42, 0x79, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7f, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79,
	0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x05, 0x45, 0x74, 0x66, 0x42,
	0x79, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x76, 0x0a, 0x04, 0x45, 0x74, 0x66, 0x73, 0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x66, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x08, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x79, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x07, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x79, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x79, 0x12, 0x38, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a,
	0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x41, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x3e, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x77, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x12,
	0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a,
	0x01, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x60, 0x0a, 0x1c, 0x72,
	0x75, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x0b, 0x2e,
	0x2f, 0x3b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x70, 0x62, 0xa2, 0x02, 0x05, 0x54, 0x49, 0x41,
	0x50, 0x49, 0xaa, 0x02, 0x14, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x54, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x5c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instruments_proto_rawDescOnce sync.Once
	file_instruments_proto_rawDescData = file_instruments_proto_rawDesc
)

func file_instruments_proto_rawDescGZIP() []byte {
	file_instruments_proto_rawDescOnce.Do(func() {
		file_instruments_proto_rawDescData = protoimpl.X.CompressGZIP(file_instruments_proto_rawDescData)
	})
	return file_instruments_proto_rawDescData
}

var file_instruments_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_instruments_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_instruments_proto_goTypes = []interface{}{
	(CouponType)(0),                        // 0: tinkoff.public.invest.api.contract.v1.CouponType
	(InstrumentIdType)(0),                  // 1: tinkoff.public.invest.api.contract.v1.InstrumentIdType
	(InstrumentStatus)(0),                  // 2: tinkoff.public.invest.api.contract.v1.InstrumentStatus
	(ShareType)(0),                         // 3: tinkoff.public.invest.api.contract.v1.ShareType
	(AssetType)(0),                         // 4: tinkoff.public.invest.api.contract.v1.AssetType
	(StructuredProductType)(0),             // 5: tinkoff.public.invest.api.contract.v1.StructuredProductType
	(EditFavoritesActionType)(0),           // 6: tinkoff.public.invest.api.contract.v1.EditFavoritesActionType
	(RealExchange)(0),                      // 7: tinkoff.public.invest.api.contract.v1.RealExchange
	(*TradingSchedulesRequest)(nil),        // 8: tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest
	(*TradingSchedulesResponse)(nil),       // 9: tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse
	(*TradingSchedule)(nil),                // 10: tinkoff.public.invest.api.contract.v1.TradingSchedule
	(*TradingDay)(nil),                     // 11: tinkoff.public.invest.api.contract.v1.TradingDay
	(*InstrumentRequest)(nil),              // 12: tinkoff.public.invest.api.contract.v1.InstrumentRequest
	(*InstrumentsRequest)(nil),             // 13: tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	(*BondResponse)(nil),                   // 14: tinkoff.public.invest.api.contract.v1.BondResponse
	(*BondsResponse)(nil),                  // 15: tinkoff.public.invest.api.contract.v1.BondsResponse
	(*GetBondCouponsRequest)(nil),          // 16: tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest
	(*GetBondCouponsResponse)(nil),         // 17: tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse
	(*Coupon)(nil),                         // 18: tinkoff.public.invest.api.contract.v1.Coupon
	(*CurrencyResponse)(nil),               // 19: tinkoff.public.invest.api.contract.v1.CurrencyResponse
	(*CurrenciesResponse)(nil),             // 20: tinkoff.public.invest.api.contract.v1.CurrenciesResponse
	(*EtfResponse)(nil),                    // 21: tinkoff.public.invest.api.contract.v1.EtfResponse
	(*EtfsResponse)(nil),                   // 22: tinkoff.public.invest.api.contract.v1.EtfsResponse
	(*FutureResponse)(nil),                 // 23: tinkoff.public.invest.api.contract.v1.FutureResponse
	(*FuturesResponse)(nil),                // 24: tinkoff.public.invest.api.contract.v1.FuturesResponse
	(*ShareResponse)(nil),                  // 25: tinkoff.public.invest.api.contract.v1.ShareResponse
	(*SharesResponse)(nil),                 // 26: tinkoff.public.invest.api.contract.v1.SharesResponse
	(*Bond)(nil),                           // 27: tinkoff.public.invest.api.contract.v1.Bond
	(*Currency)(nil),                       // 28: tinkoff.public.invest.api.contract.v1.Currency
	(*Etf)(nil),                            // 29: tinkoff.public.invest.api.contract.v1.Etf
	(*Future)(nil),                         // 30: tinkoff.public.invest.api.contract.v1.Future
	(*Share)(nil),                          // 31: tinkoff.public.invest.api.contract.v1.Share
	(*GetAccruedInterestsRequest)(nil),     // 32: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest
	(*GetAccruedInterestsResponse)(nil),    // 33: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse
	(*AccruedInterest)(nil),                // 34: tinkoff.public.invest.api.contract.v1.AccruedInterest
	(*GetFuturesMarginRequest)(nil),        // 35: tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest
	(*GetFuturesMarginResponse)(nil),       // 36: tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse
	(*InstrumentResponse)(nil),             // 37: tinkoff.public.invest.api.contract.v1.InstrumentResponse
	(*Instrument)(nil),                     // 38: tinkoff.public.invest.api.contract.v1.Instrument
	(*GetDividendsRequest)(nil),            // 39: tinkoff.public.invest.api.contract.v1.GetDividendsRequest
	(*GetDividendsResponse)(nil),           // 40: tinkoff.public.invest.api.contract.v1.GetDividendsResponse
	(*Dividend)(nil),                       // 41: tinkoff.public.invest.api.contract.v1.Dividend
	(*AssetRequest)(nil),                   // 42: tinkoff.public.invest.api.contract.v1.AssetRequest
	(*AssetResponse)(nil),                  // 43: tinkoff.public.invest.api.contract.v1.AssetResponse
	(*AssetsRequest)(nil),                  // 44: tinkoff.public.invest.api.contract.v1.AssetsRequest
	(*AssetsResponse)(nil),                 // 45: tinkoff.public.invest.api.contract.v1.AssetsResponse
	(*AssetFull)(nil),                      // 46: tinkoff.public.invest.api.contract.v1.AssetFull
	(*Asset)(nil),                          // 47: tinkoff.public.invest.api.contract.v1.Asset
	(*AssetCurrency)(nil),                  // 48: tinkoff.public.invest.api.contract.v1.AssetCurrency
	(*AssetSecurity)(nil),                  // 49: tinkoff.public.invest.api.contract.v1.AssetSecurity
	(*AssetShare)(nil),                     // 50: tinkoff.public.invest.api.contract.v1.AssetShare
	(*AssetBond)(nil),                      // 51: tinkoff.public.invest.api.contract.v1.AssetBond
	(*AssetStructuredProduct)(nil),         // 52: tinkoff.public.invest.api.contract.v1.AssetStructuredProduct
	(*AssetEtf)(nil),                       // 53: tinkoff.public.invest.api.contract.v1.AssetEtf
	(*AssetClearingCertificate)(nil),       // 54: tinkoff.public.invest.api.contract.v1.AssetClearingCertificate
	(*Brand)(nil),                          // 55: tinkoff.public.invest.api.contract.v1.Brand
	(*AssetInstrument)(nil),                // 56: tinkoff.public.invest.api.contract.v1.AssetInstrument
	(*InstrumentLink)(nil),                 // 57: tinkoff.public.invest.api.contract.v1.InstrumentLink
	(*GetFavoritesRequest)(nil),            // 58: tinkoff.public.invest.api.contract.v1.GetFavoritesRequest
	(*GetFavoritesResponse)(nil),           // 59: tinkoff.public.invest.api.contract.v1.GetFavoritesResponse
	(*FavoriteInstrument)(nil),             // 60: tinkoff.public.invest.api.contract.v1.FavoriteInstrument
	(*EditFavoritesRequest)(nil),           // 61: tinkoff.public.invest.api.contract.v1.EditFavoritesRequest
	(*EditFavoritesRequestInstrument)(nil), // 62: tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument
	(*EditFavoritesResponse)(nil),          // 63: tinkoff.public.invest.api.contract.v1.EditFavoritesResponse
	(*timestamp.Timestamp)(nil),            // 64: google.protobuf.Timestamp
	(*MoneyValue)(nil),                     // 65: tinkoff.public.invest.api.contract.v1.MoneyValue
	(*Quotation)(nil),                      // 66: tinkoff.public.invest.api.contract.v1.Quotation
	(SecurityTradingStatus)(0),             // 67: tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
}
var file_instruments_proto_depIdxs = []int32{
	64,  // 0: tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest.from:type_name -> google.protobuf.Timestamp
	64,  // 1: tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest.to:type_name -> google.protobuf.Timestamp
	10,  // 2: tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse.exchanges:type_name -> tinkoff.public.invest.api.contract.v1.TradingSchedule
	11,  // 3: tinkoff.public.invest.api.contract.v1.TradingSchedule.days:type_name -> tinkoff.public.invest.api.contract.v1.TradingDay
	64,  // 4: tinkoff.public.invest.api.contract.v1.TradingDay.date:type_name -> google.protobuf.Timestamp
	64,  // 5: tinkoff.public.invest.api.contract.v1.TradingDay.start_time:type_name -> google.protobuf.Timestamp
	64,  // 6: tinkoff.public.invest.api.contract.v1.TradingDay.end_time:type_name -> google.protobuf.Timestamp
	64,  // 7: tinkoff.public.invest.api.contract.v1.TradingDay.opening_auction_start_time:type_name -> google.protobuf.Timestamp
	64,  // 8: tinkoff.public.invest.api.contract.v1.TradingDay.closing_auction_end_time:type_name -> google.protobuf.Timestamp
	64,  // 9: tinkoff.public.invest.api.contract.v1.TradingDay.evening_opening_auction_start_time:type_name -> google.protobuf.Timestamp
	64,  // 10: tinkoff.public.invest.api.contract.v1.TradingDay.evening_start_time:type_name -> google.protobuf.Timestamp
	64,  // 11: tinkoff.public.invest.api.contract.v1.TradingDay.evening_end_time:type_name -> google.protobuf.Timestamp
	64,  // 12: tinkoff.public.invest.api.contract.v1.TradingDay.clearing_start_time:type_name -> google.protobuf.Timestamp
	64,  // 13: tinkoff.public.invest.api.contract.v1.TradingDay.clearing_end_time:type_name -> google.protobuf.Timestamp
	64,  // 14: tinkoff.public.invest.api.contract.v1.TradingDay.premarket_start_time:type_name -> google.protobuf.Timestamp
	64,  // 15: tinkoff.public.invest.api.contract.v1.TradingDay.premarket_end_time:type_name -> google.protobuf.Timestamp
	1,   // 16: tinkoff.public.invest.api.contract.v1.InstrumentRequest.id_type:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentIdType
	2,   // 17: tinkoff.public.invest.api.contract.v1.InstrumentsRequest.instrument_status:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentStatus
	27,  // 18: tinkoff.public.invest.api.contract.v1.BondResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Bond
	27,  // 19: tinkoff.public.invest.api.contract.v1.BondsResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Bond
	64,  // 20: tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest.from:type_name -> google.protobuf.Timestamp
	64,  // 21: tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest.to:type_name -> google.protobuf.Timestamp
	18,  // 22: tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse.events:type_name -> tinkoff.public.invest.api.contract.v1.Coupon
	64,  // 23: tinkoff.public.invest.api.contract.v1.Coupon.coupon_date:type_name -> google.protobuf.Timestamp
	64,  // 24: tinkoff.public.invest.api.contract.v1.Coupon.fix_date:type_name -> google.protobuf.Timestamp
	65,  // 25: tinkoff.public.invest.api.contract.v1.Coupon.pay_one_bond:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	0,   // 26: tinkoff.public.invest.api.contract.v1.Coupon.coupon_type:type_name -> tinkoff.public.invest.api.contract.v1.CouponType
	64,  // 27: tinkoff.public.invest.api.contract.v1.Coupon.coupon_start_date:type_name -> google.protobuf.Timestamp
	64,  // 28: tinkoff.public.invest.api.contract.v1.Coupon.coupon_end_date:type_name -> google.protobuf.Timestamp
	28,  // 29: tinkoff.public.invest.api.contract.v1.CurrencyResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Currency
	28,  // 30: tinkoff.public.invest.api.contract.v1.CurrenciesResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Currency
	29,  // 31: tinkoff.public.invest.api.contract.v1.EtfResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Etf
	29,  // 32: tinkoff.public.invest.api.contract.v1.EtfsResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Etf
	30,  // 33: tinkoff.public.invest.api.contract.v1.FutureResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Future
	30,  // 34: tinkoff.public.invest.api.contract.v1.FuturesResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Future
	31,  // 35: tinkoff.public.invest.api.contract.v1.ShareResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Share
	31,  // 36: tinkoff.public.invest.api.contract.v1.SharesResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Share
	66,  // 37: tinkoff.public.invest.api.contract.v1.Bond.klong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 38: tinkoff.public.invest.api.contract.v1.Bond.kshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 39: tinkoff.public.invest.api.contract.v1.Bond.dlong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 40: tinkoff.public.invest.api.contract.v1.Bond.dshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 41: tinkoff.public.invest.api.contract.v1.Bond.dlong_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 42: tinkoff.public.invest.api.contract.v1.Bond.dshort_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 43: tinkoff.public.invest.api.contract.v1.Bond.maturity_date:type_name -> google.protobuf.Timestamp
	65,  // 44: tinkoff.public.invest.api.contract.v1.Bond.nominal:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	64,  // 45: tinkoff.public.invest.api.contract.v1.Bond.state_reg_date:type_name -> google.protobuf.Timestamp
	64,  // 46: tinkoff.public.invest.api.contract.v1.Bond.placement_date:type_name -> google.protobuf.Timestamp
	65,  // 47: tinkoff.public.invest.api.contract.v1.Bond.placement_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	65,  // 48: tinkoff.public.invest.api.contract.v1.Bond.aci_value:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	67,  // 49: tinkoff.public.invest.api.contract.v1.Bond.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	66,  // 50: tinkoff.public.invest.api.contract.v1.Bond.min_price_increment:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	7,   // 51: tinkoff.public.invest.api.contract.v1.Bond.real_exchange:type_name -> tinkoff.public.invest.api.contract.v1.RealExchange
	66,  // 52: tinkoff.public.invest.api.contract.v1.Currency.klong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 53: tinkoff.public.invest.api.contract.v1.Currency.kshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 54: tinkoff.public.invest.api.contract.v1.Currency.dlong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 55: tinkoff.public.invest.api.contract.v1.Currency.dshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 56: tinkoff.public.invest.api.contract.v1.Currency.dlong_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 57: tinkoff.public.invest.api.contract.v1.Currency.dshort_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 58: tinkoff.public.invest.api.contract.v1.Currency.nominal:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	67,  // 59: tinkoff.public.invest.api.contract.v1.Currency.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	66,  // 60: tinkoff.public.invest.api.contract.v1.Currency.min_price_increment:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	7,   // 61: tinkoff.public.invest.api.contract.v1.Currency.real_exchange:type_name -> tinkoff.public.invest.api.contract.v1.RealExchange
	66,  // 62: tinkoff.public.invest.api.contract.v1.Etf.klong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 63: tinkoff.public.invest.api.contract.v1.Etf.kshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 64: tinkoff.public.invest.api.contract.v1.Etf.dlong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 65: tinkoff.public.invest.api.contract.v1.Etf.dshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 66: tinkoff.public.invest.api.contract.v1.Etf.dlong_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 67: tinkoff.public.invest.api.contract.v1.Etf.dshort_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 68: tinkoff.public.invest.api.contract.v1.Etf.fixed_commission:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 69: tinkoff.public.invest.api.contract.v1.Etf.released_date:type_name -> google.protobuf.Timestamp
	66,  // 70: tinkoff.public.invest.api.contract.v1.Etf.num_shares:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	67,  // 71: tinkoff.public.invest.api.contract.v1.Etf.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	66,  // 72: tinkoff.public.invest.api.contract.v1.Etf.min_price_increment:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	7,   // 73: tinkoff.public.invest.api.contract.v1.Etf.real_exchange:type_name -> tinkoff.public.invest.api.contract.v1.RealExchange
	66,  // 74: tinkoff.public.invest.api.contract.v1.Future.klong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 75: tinkoff.public.invest.api.contract.v1.Future.kshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 76: tinkoff.public.invest.api.contract.v1.Future.dlong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 77: tinkoff.public.invest.api.contract.v1.Future.dshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 78: tinkoff.public.invest.api.contract.v1.Future.dlong_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 79: tinkoff.public.invest.api.contract.v1.Future.dshort_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 80: tinkoff.public.invest.api.contract.v1.Future.first_trade_date:type_name -> google.protobuf.Timestamp
	64,  // 81: tinkoff.public.invest.api.contract.v1.Future.last_trade_date:type_name -> google.protobuf.Timestamp
	66,  // 82: tinkoff.public.invest.api.contract.v1.Future.basic_asset_size:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 83: tinkoff.public.invest.api.contract.v1.Future.expiration_date:type_name -> google.protobuf.Timestamp
	67,  // 84: tinkoff.public.invest.api.contract.v1.Future.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	66,  // 85: tinkoff.public.invest.api.contract.v1.Future.min_price_increment:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	7,   // 86: tinkoff.public.invest.api.contract.v1.Future.real_exchange:type_name -> tinkoff.public.invest.api.contract.v1.RealExchange
	66,  // 87: tinkoff.public.invest.api.contract.v1.Share.klong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 88: tinkoff.public.invest.api.contract.v1.Share.kshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 89: tinkoff.public.invest.api.contract.v1.Share.dlong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 90: tinkoff.public.invest.api.contract.v1.Share.dshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 91: tinkoff.public.invest.api.contract.v1.Share.dlong_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 92: tinkoff.public.invest.api.contract.v1.Share.dshort_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 93: tinkoff.public.invest.api.contract.v1.Share.ipo_date:type_name -> google.protobuf.Timestamp
	65,  // 94: tinkoff.public.invest.api.contract.v1.Share.nominal:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	67,  // 95: tinkoff.public.invest.api.contract.v1.Share.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	3,   // 96: tinkoff.public.invest.api.contract.v1.Share.share_type:type_name -> tinkoff.public.invest.api.contract.v1.ShareType
	66,  // 97: tinkoff.public.invest.api.contract.v1.Share.min_price_increment:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	7,   // 98: tinkoff.public.invest.api.contract.v1.Share.real_exchange:type_name -> tinkoff.public.invest.api.contract.v1.RealExchange
	64,  // 99: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest.from:type_name -> google.protobuf.Timestamp
	64,  // 100: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest.to:type_name -> google.protobuf.Timestamp
	34,  // 101: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse.accrued_interests:type_name -> tinkoff.public.invest.api.contract.v1.AccruedInterest
	64,  // 102: tinkoff.public.invest.api.contract.v1.AccruedInterest.date:type_name -> google.protobuf.Timestamp
	66,  // 103: tinkoff.public.invest.api.contract.v1.AccruedInterest.value:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 104: tinkoff.public.invest.api.contract.v1.AccruedInterest.value_percent:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 105: tinkoff.public.invest.api.contract.v1.AccruedInterest.nominal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 106: tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_buy:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	65,  // 107: tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_sell:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	66,  // 108: tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 109: tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment_amount:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	38,  // 110: tinkoff.public.invest.api.contract.v1.InstrumentResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Instrument
	66,  // 111: tinkoff.public.invest.api.contract.v1.Instrument.klong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 112: tinkoff.public.invest.api.contract.v1.Instrument.kshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 113: tinkoff.public.invest.api.contract.v1.Instrument.dlong:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 114: tinkoff.public.invest.api.contract.v1.Instrument.dshort:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 115: tinkoff.public.invest.api.contract.v1.Instrument.dlong_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 116: tinkoff.public.invest.api.contract.v1.Instrument.dshort_min:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	67,  // 117: tinkoff.public.invest.api.contract.v1.Instrument.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	66,  // 118: tinkoff.public.invest.api.contract.v1.Instrument.min_price_increment:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	7,   // 119: tinkoff.public.invest.api.contract.v1.Instrument.real_exchange:type_name -> tinkoff.public.invest.api.contract.v1.RealExchange
	64,  // 120: tinkoff.public.invest.api.contract.v1.GetDividendsRequest.from:type_name -> google.protobuf.Timestamp
	64,  // 121: tinkoff.public.invest.api.contract.v1.GetDividendsRequest.to:type_name -> google.protobuf.Timestamp
	41,  // 122: tinkoff.public.invest.api.contract.v1.GetDividendsResponse.dividends:type_name -> tinkoff.public.invest.api.contract.v1.Dividend
	65,  // 123: tinkoff.public.invest.api.contract.v1.Dividend.dividend_net:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	64,  // 124: tinkoff.public.invest.api.contract.v1.Dividend.payment_date:type_name -> google.protobuf.Timestamp
	64,  // 125: tinkoff.public.invest.api.contract.v1.Dividend.declared_date:type_name -> google.protobuf.Timestamp
	64,  // 126: tinkoff.public.invest.api.contract.v1.Dividend.last_buy_date:type_name -> google.protobuf.Timestamp
	64,  // 127: tinkoff.public.invest.api.contract.v1.Dividend.record_date:type_name -> google.protobuf.Timestamp
	65,  // 128: tinkoff.public.invest.api.contract.v1.Dividend.close_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	66,  // 129: tinkoff.public.invest.api.contract.v1.Dividend.yield_value:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 130: tinkoff.public.invest.api.contract.v1.Dividend.created_at:type_name -> google.protobuf.Timestamp
	46,  // 131: tinkoff.public.invest.api.contract.v1.AssetResponse.asset:type_name -> tinkoff.public.invest.api.contract.v1.AssetFull
	47,  // 132: tinkoff.public.invest.api.contract.v1.AssetsResponse.assets:type_name -> tinkoff.public.invest.api.contract.v1.Asset
	4,   // 133: tinkoff.public.invest.api.contract.v1.AssetFull.type:type_name -> tinkoff.public.invest.api.contract.v1.AssetType
	64,  // 134: tinkoff.public.invest.api.contract.v1.AssetFull.deleted_at:type_name -> google.protobuf.Timestamp
	48,  // 135: tinkoff.public.invest.api.contract.v1.AssetFull.currency:type_name -> tinkoff.public.invest.api.contract.v1.AssetCurrency
	49,  // 136: tinkoff.public.invest.api.contract.v1.AssetFull.security:type_name -> tinkoff.public.invest.api.contract.v1.AssetSecurity
	55,  // 137: tinkoff.public.invest.api.contract.v1.AssetFull.brand:type_name -> tinkoff.public.invest.api.contract.v1.Brand
	64,  // 138: tinkoff.public.invest.api.contract.v1.AssetFull.updated_at:type_name -> google.protobuf.Timestamp
	56,  // 139: tinkoff.public.invest.api.contract.v1.AssetFull.instruments:type_name -> tinkoff.public.invest.api.contract.v1.AssetInstrument
	4,   // 140: tinkoff.public.invest.api.contract.v1.Asset.type:type_name -> tinkoff.public.invest.api.contract.v1.AssetType
	56,  // 141: tinkoff.public.invest.api.contract.v1.Asset.instruments:type_name -> tinkoff.public.invest.api.contract.v1.AssetInstrument
	50,  // 142: tinkoff.public.invest.api.contract.v1.AssetSecurity.share:type_name -> tinkoff.public.invest.api.contract.v1.AssetShare
	51,  // 143: tinkoff.public.invest.api.contract.v1.AssetSecurity.bond:type_name -> tinkoff.public.invest.api.contract.v1.AssetBond
	52,  // 144: tinkoff.public.invest.api.contract.v1.AssetSecurity.sp:type_name -> tinkoff.public.invest.api.contract.v1.AssetStructuredProduct
	53,  // 145: tinkoff.public.invest.api.contract.v1.AssetSecurity.etf:type_name -> tinkoff.public.invest.api.contract.v1.AssetEtf
	54,  // 146: tinkoff.public.invest.api.contract.v1.AssetSecurity.clearing_certificate:type_name -> tinkoff.public.invest.api.contract.v1.AssetClearingCertificate
	3,   // 147: tinkoff.public.invest.api.contract.v1.AssetShare.type:type_name -> tinkoff.public.invest.api.contract.v1.ShareType
	66,  // 148: tinkoff.public.invest.api.contract.v1.AssetShare.issue_size:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 149: tinkoff.public.invest.api.contract.v1.AssetShare.nominal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 150: tinkoff.public.invest.api.contract.v1.AssetShare.dividend_rate:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 151: tinkoff.public.invest.api.contract.v1.AssetShare.ipo_date:type_name -> google.protobuf.Timestamp
	64,  // 152: tinkoff.public.invest.api.contract.v1.AssetShare.registry_date:type_name -> google.protobuf.Timestamp
	64,  // 153: tinkoff.public.invest.api.contract.v1.AssetShare.placement_date:type_name -> google.protobuf.Timestamp
	66,  // 154: tinkoff.public.invest.api.contract.v1.AssetShare.issue_size_plan:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 155: tinkoff.public.invest.api.contract.v1.AssetShare.total_float:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 156: tinkoff.public.invest.api.contract.v1.AssetBond.current_nominal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 157: tinkoff.public.invest.api.contract.v1.AssetBond.issue_size:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 158: tinkoff.public.invest.api.contract.v1.AssetBond.nominal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 159: tinkoff.public.invest.api.contract.v1.AssetBond.maturity_date:type_name -> google.protobuf.Timestamp
	64,  // 160: tinkoff.public.invest.api.contract.v1.AssetBond.state_reg_date:type_name -> google.protobuf.Timestamp
	64,  // 161: tinkoff.public.invest.api.contract.v1.AssetBond.placement_date:type_name -> google.protobuf.Timestamp
	66,  // 162: tinkoff.public.invest.api.contract.v1.AssetBond.placement_price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 163: tinkoff.public.invest.api.contract.v1.AssetBond.issue_size_plan:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 164: tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.nominal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	5,   // 165: tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.type:type_name -> tinkoff.public.invest.api.contract.v1.StructuredProductType
	4,   // 166: tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.asset_type:type_name -> tinkoff.public.invest.api.contract.v1.AssetType
	66,  // 167: tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.safety_barrier:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 168: tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.maturity_date:type_name -> google.protobuf.Timestamp
	66,  // 169: tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.issue_size_plan:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 170: tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.issue_size:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 171: tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.placement_date:type_name -> google.protobuf.Timestamp
	66,  // 172: tinkoff.public.invest.api.contract.v1.AssetEtf.total_expense:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 173: tinkoff.public.invest.api.contract.v1.AssetEtf.hurdle_rate:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 174: tinkoff.public.invest.api.contract.v1.AssetEtf.performance_fee:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 175: tinkoff.public.invest.api.contract.v1.AssetEtf.fixed_commission:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 176: tinkoff.public.invest.api.contract.v1.AssetEtf.buy_premium:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 177: tinkoff.public.invest.api.contract.v1.AssetEtf.sell_discount:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 178: tinkoff.public.invest.api.contract.v1.AssetEtf.num_share:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 179: tinkoff.public.invest.api.contract.v1.AssetEtf.released_date:type_name -> google.protobuf.Timestamp
	66,  // 180: tinkoff.public.invest.api.contract.v1.AssetEtf.index_recovery_period:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 181: tinkoff.public.invest.api.contract.v1.AssetEtf.expense_commission:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 182: tinkoff.public.invest.api.contract.v1.AssetEtf.primary_index_tracking_error:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	64,  // 183: tinkoff.public.invest.api.contract.v1.AssetEtf.rebalancing_dates:type_name -> google.protobuf.Timestamp
	66,  // 184: tinkoff.public.invest.api.contract.v1.AssetEtf.nominal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 185: tinkoff.public.invest.api.contract.v1.AssetClearingCertificate.nominal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	57,  // 186: tinkoff.public.invest.api.contract.v1.AssetInstrument.links:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentLink
	60,  // 187: tinkoff.public.invest.api.contract.v1.GetFavoritesResponse.favorite_instruments:type_name -> tinkoff.public.invest.api.contract.v1.FavoriteInstrument
	62,  // 188: tinkoff.public.invest.api.contract.v1.EditFavoritesRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument
	6,   // 189: tinkoff.public.invest.api.contract.v1.EditFavoritesRequest.action_type:type_name -> tinkoff.public.invest.api.contract.v1.EditFavoritesActionType
	60,  // 190: tinkoff.public.invest.api.contract.v1.EditFavoritesResponse.favorite_instruments:type_name -> tinkoff.public.invest.api.contract.v1.FavoriteInstrument
	8,   // 191: tinkoff.public.invest.api.contract.v1.InstrumentsService.TradingSchedules:input_type -> tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest
	12,  // 192: tinkoff.public.invest.api.contract.v1.InstrumentsService.BondBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	13,  // 193: tinkoff.public.invest.api.contract.v1.InstrumentsService.Bonds:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	16,  // 194: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetBondCoupons:input_type -> tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest
	12,  // 195: tinkoff.public.invest.api.contract.v1.InstrumentsService.CurrencyBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	13,  // 196: tinkoff.public.invest.api.contract.v1.InstrumentsService.Currencies:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	12,  // 197: tinkoff.public.invest.api.contract.v1.InstrumentsService.EtfBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	13,  // 198: tinkoff.public.invest.api.contract.v1.InstrumentsService.Etfs:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	12,  // 199: tinkoff.public.invest.api.contract.v1.InstrumentsService.FutureBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	13,  // 200: tinkoff.public.invest.api.contract.v1.InstrumentsService.Futures:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	12,  // 201: tinkoff.public.invest.api.contract.v1.InstrumentsService.ShareBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	13,  // 202: tinkoff.public.invest.api.contract.v1.InstrumentsService.Shares:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	32,  // 203: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAccruedInterests:input_type -> tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest
	35,  // 204: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFuturesMargin:input_type -> tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest
	12,  // 205: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetInstrumentBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	39,  // 206: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetDividends:input_type -> tinkoff.public.invest.api.contract.v1.GetDividendsRequest
	42,  // 207: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAssetBy:input_type -> tinkoff.public.invest.api.contract.v1.AssetRequest
	44,  // 208: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAssets:input_type -> tinkoff.public.invest.api.contract.v1.AssetsRequest
	58,  // 209: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFavorites:input_type -> tinkoff.public.invest.api.contract.v1.GetFavoritesRequest
	61,  // 210: tinkoff.public.invest.api.contract.v1.InstrumentsService.EditFavorites:input_type -> tinkoff.public.invest.api.contract.v1.EditFavoritesRequest
	9,   // 211: tinkoff.public.invest.api.contract.v1.InstrumentsService.TradingSchedules:output_type -> tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse
	14,  // 212: tinkoff.public.invest.api.contract.v1.InstrumentsService.BondBy:output_type -> tinkoff.public.invest.api.contract.v1.BondResponse
	15,  // 213: tinkoff.public.invest.api.contract.v1.InstrumentsService.Bonds:output_type -> tinkoff.public.invest.api.contract.v1.BondsResponse
	17,  // 214: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetBondCoupons:output_type -> tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse
	19,  // 215: tinkoff.public.invest.api.contract.v1.InstrumentsService.CurrencyBy:output_type -> tinkoff.public.invest.api.contract.v1.CurrencyResponse
	20,  // 216: tinkoff.public.invest.api.contract.v1.InstrumentsService.Currencies:output_type -> tinkoff.public.invest.api.contract.v1.CurrenciesResponse
	21,  // 217: tinkoff.public.invest.api.contract.v1.InstrumentsService.EtfBy:output_type -> tinkoff.public.invest.api.contract.v1.EtfResponse
	22,  // 218: tinkoff.public.invest.api.contract.v1.InstrumentsService.Etfs:output_type -> tinkoff.public.invest.api.contract.v1.EtfsResponse
	23,  // 219: tinkoff.public.invest.api.contract.v1.InstrumentsService.FutureBy:output_type -> tinkoff.public.invest.api.contract.v1.FutureResponse
	24,  // 220: tinkoff.public.invest.api.contract.v1.InstrumentsService.Futures:output_type -> tinkoff.public.invest.api.contract.v1.FuturesResponse
	25,  // 221: tinkoff.public.invest.api.contract.v1.InstrumentsService.ShareBy:output_type -> tinkoff.public.invest.api.contract.v1.ShareResponse
	26,  // 222: tinkoff.public.invest.api.contract.v1.InstrumentsService.Shares:output_type -> tinkoff.public.invest.api.contract.v1.SharesResponse
	33,  // 223: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAccruedInterests:output_type -> tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse
	36,  // 224: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFuturesMargin:output_type -> tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse
	37,  // 225: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetInstrumentBy:output_type -> tinkoff.public.invest.api.contract.v1.InstrumentResponse
	40,  // 226: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetDividends:output_type -> tinkoff.public.invest.api.contract.v1.GetDividendsResponse
	43,  // 227: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAssetBy:output_type -> tinkoff.public.invest.api.contract.v1.AssetResponse
	45,  // 228: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAssets:output_type -> tinkoff.public.invest.api.contract.v1.AssetsResponse
	59,  // 229: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFavorites:output_type -> tinkoff.public.invest.api.contract.v1.GetFavoritesResponse
	63,  // 230: tinkoff.public.invest.api.contract.v1.InstrumentsService.EditFavorites:output_type -> tinkoff.public.invest.api.contract.v1.EditFavoritesResponse
	211, // [211:231] is the sub-list for method output_type
	191, // [191:211] is the sub-list for method input_type
	191, // [191:191] is the sub-list for extension type_name
	191, // [191:191] is the sub-list for extension extendee
	0,   // [0:191] is the sub-list for field type_name
}

func init() { file_instruments_proto_init() }
func file_instruments_proto_init() {
	if File_instruments_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_instruments_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingSchedulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingSchedulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBondCouponsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBondCouponsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtfsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Etf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Future); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Share); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccruedInterestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccruedInterestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccruedInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFuturesMarginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFuturesMarginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dividend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetStructuredProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetEtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetClearingCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavoritesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavoritesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditFavoritesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditFavoritesRequestInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditFavoritesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_instruments_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*AssetFull_Currency)(nil),
		(*AssetFull_Security)(nil),
	}
	file_instruments_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*AssetSecurity_Share)(nil),
		(*AssetSecurity_Bond)(nil),
		(*AssetSecurity_Sp)(nil),
		(*AssetSecurity_Etf)(nil),
		(*AssetSecurity_ClearingCertificate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instruments_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_instruments_proto_goTypes,
		DependencyIndexes: file_instruments_proto_depIdxs,
		EnumInfos:         file_instruments_proto_enumTypes,
		MessageInfos:      file_instruments_proto_msgTypes,
	}.Build()
	File_instruments_proto = out.File
	file_instruments_proto_rawDesc = nil
	file_instruments_proto_goTypes = nil
	file_instruments_proto_depIdxs = nil
}
