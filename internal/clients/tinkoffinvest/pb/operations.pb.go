// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: operations.proto

package investpb

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//Статус запрашиваемых операций.
type OperationState int32

const (
	OperationState_OPERATION_STATE_UNSPECIFIED OperationState = 0 //Статус операции не определён
	OperationState_OPERATION_STATE_EXECUTED    OperationState = 1 //Исполнена.
	OperationState_OPERATION_STATE_CANCELED    OperationState = 2 //Отменена.
)

// Enum value maps for OperationState.
var (
	OperationState_name = map[int32]string{
		0: "OPERATION_STATE_UNSPECIFIED",
		1: "OPERATION_STATE_EXECUTED",
		2: "OPERATION_STATE_CANCELED",
	}
	OperationState_value = map[string]int32{
		"OPERATION_STATE_UNSPECIFIED": 0,
		"OPERATION_STATE_EXECUTED":    1,
		"OPERATION_STATE_CANCELED":    2,
	}
)

func (x OperationState) Enum() *OperationState {
	p := new(OperationState)
	*p = x
	return p
}

func (x OperationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationState) Descriptor() protoreflect.EnumDescriptor {
	return file_operations_proto_enumTypes[0].Descriptor()
}

func (OperationState) Type() protoreflect.EnumType {
	return &file_operations_proto_enumTypes[0]
}

func (x OperationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationState.Descriptor instead.
func (OperationState) EnumDescriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{0}
}

//Тип операции.
type OperationType int32

const (
	OperationType_OPERATION_TYPE_UNSPECIFIED                 OperationType = 0  //Тип операции не определён.
	OperationType_OPERATION_TYPE_INPUT                       OperationType = 1  //Пополнение брокерского счёта.
	OperationType_OPERATION_TYPE_BOND_TAX                    OperationType = 2  //Удержание НДФЛ по купонам.
	OperationType_OPERATION_TYPE_OUTPUT_SECURITIES           OperationType = 3  //Вывод ЦБ.
	OperationType_OPERATION_TYPE_OVERNIGHT                   OperationType = 4  //Доход по сделке РЕПО овернайт.
	OperationType_OPERATION_TYPE_TAX                         OperationType = 5  //Удержание налога.
	OperationType_OPERATION_TYPE_BOND_REPAYMENT_FULL         OperationType = 6  //Полное погашение облигаций.
	OperationType_OPERATION_TYPE_SELL_CARD                   OperationType = 7  //Продажа ЦБ с карты.
	OperationType_OPERATION_TYPE_DIVIDEND_TAX                OperationType = 8  //Удержание налога по дивидендам.
	OperationType_OPERATION_TYPE_OUTPUT                      OperationType = 9  //Вывод денежных средств.
	OperationType_OPERATION_TYPE_BOND_REPAYMENT              OperationType = 10 //Частичное погашение облигаций.
	OperationType_OPERATION_TYPE_TAX_CORRECTION              OperationType = 11 //Корректировка налога.
	OperationType_OPERATION_TYPE_SERVICE_FEE                 OperationType = 12 //Удержание комиссии за обслуживание брокерского счёта.
	OperationType_OPERATION_TYPE_BENEFIT_TAX                 OperationType = 13 //Удержание налога за материальную выгоду.
	OperationType_OPERATION_TYPE_MARGIN_FEE                  OperationType = 14 //Удержание комиссии за непокрытую позицию.
	OperationType_OPERATION_TYPE_BUY                         OperationType = 15 //Покупка ЦБ.
	OperationType_OPERATION_TYPE_BUY_CARD                    OperationType = 16 //Покупка ЦБ с карты.
	OperationType_OPERATION_TYPE_INPUT_SECURITIES            OperationType = 17 //Завод ценных бумаг из другого депозитария.
	OperationType_OPERATION_TYPE_SELL_MARGIN                 OperationType = 18 //Продажа в результате Margin-call.
	OperationType_OPERATION_TYPE_BROKER_FEE                  OperationType = 19 //Удержание комиссии за операцию.
	OperationType_OPERATION_TYPE_BUY_MARGIN                  OperationType = 20 //Покупка в результате Margin-call.
	OperationType_OPERATION_TYPE_DIVIDEND                    OperationType = 21 //Выплата дивидендов.
	OperationType_OPERATION_TYPE_SELL                        OperationType = 22 //Продажа ЦБ.
	OperationType_OPERATION_TYPE_COUPON                      OperationType = 23 //Выплата купонов.
	OperationType_OPERATION_TYPE_SUCCESS_FEE                 OperationType = 24 //Удержание комиссии SuccessFee.
	OperationType_OPERATION_TYPE_DIVIDEND_TRANSFER           OperationType = 25 //Передача дивидендного дохода.
	OperationType_OPERATION_TYPE_ACCRUING_VARMARGIN          OperationType = 26 //Зачисление вариационной маржи.
	OperationType_OPERATION_TYPE_WRITING_OFF_VARMARGIN       OperationType = 27 //Списание вариационной маржи.
	OperationType_OPERATION_TYPE_DELIVERY_BUY                OperationType = 28 //Покупка в рамках экспирации фьючерсного контракта.
	OperationType_OPERATION_TYPE_DELIVERY_SELL               OperationType = 29 //Продажа в рамках экспирации фьючерсного контракта.
	OperationType_OPERATION_TYPE_TRACK_MFEE                  OperationType = 30 //Комиссия за управление по счёту автоследования.
	OperationType_OPERATION_TYPE_TRACK_PFEE                  OperationType = 31 //Комиссия за результат по счёту автоследования.
	OperationType_OPERATION_TYPE_TAX_PROGRESSIVE             OperationType = 32 //Удержание налога по ставке 15%.
	OperationType_OPERATION_TYPE_BOND_TAX_PROGRESSIVE        OperationType = 33 //Удержание налога по купонам по ставке 15%.
	OperationType_OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE    OperationType = 34 //Удержание налога по дивидендам по ставке 15%.
	OperationType_OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE     OperationType = 35 //Удержание налога за материальную выгоду по ставке 15%.
	OperationType_OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE  OperationType = 36 //Корректировка налога по ставке 15%.
	OperationType_OPERATION_TYPE_TAX_REPO_PROGRESSIVE        OperationType = 37 //Удержание налога за возмещение по сделкам РЕПО по ставке 15%.
	OperationType_OPERATION_TYPE_TAX_REPO                    OperationType = 38 //Удержание налога за возмещение по сделкам РЕПО.
	OperationType_OPERATION_TYPE_TAX_REPO_HOLD               OperationType = 39 //Удержание налога по сделкам РЕПО.
	OperationType_OPERATION_TYPE_TAX_REPO_REFUND             OperationType = 40 //Возврат налога по сделкам РЕПО.
	OperationType_OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE   OperationType = 41 //Удержание налога по сделкам РЕПО по ставке 15%.
	OperationType_OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE OperationType = 42 //Возврат налога по сделкам РЕПО по ставке 15%.
	OperationType_OPERATION_TYPE_DIV_EXT                     OperationType = 43 //Выплата дивидендов на карту.
	OperationType_OPERATION_TYPE_TAX_CORRECTION_COUPON       OperationType = 44 //Корректировка налога по купонам.
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0:  "OPERATION_TYPE_UNSPECIFIED",
		1:  "OPERATION_TYPE_INPUT",
		2:  "OPERATION_TYPE_BOND_TAX",
		3:  "OPERATION_TYPE_OUTPUT_SECURITIES",
		4:  "OPERATION_TYPE_OVERNIGHT",
		5:  "OPERATION_TYPE_TAX",
		6:  "OPERATION_TYPE_BOND_REPAYMENT_FULL",
		7:  "OPERATION_TYPE_SELL_CARD",
		8:  "OPERATION_TYPE_DIVIDEND_TAX",
		9:  "OPERATION_TYPE_OUTPUT",
		10: "OPERATION_TYPE_BOND_REPAYMENT",
		11: "OPERATION_TYPE_TAX_CORRECTION",
		12: "OPERATION_TYPE_SERVICE_FEE",
		13: "OPERATION_TYPE_BENEFIT_TAX",
		14: "OPERATION_TYPE_MARGIN_FEE",
		15: "OPERATION_TYPE_BUY",
		16: "OPERATION_TYPE_BUY_CARD",
		17: "OPERATION_TYPE_INPUT_SECURITIES",
		18: "OPERATION_TYPE_SELL_MARGIN",
		19: "OPERATION_TYPE_BROKER_FEE",
		20: "OPERATION_TYPE_BUY_MARGIN",
		21: "OPERATION_TYPE_DIVIDEND",
		22: "OPERATION_TYPE_SELL",
		23: "OPERATION_TYPE_COUPON",
		24: "OPERATION_TYPE_SUCCESS_FEE",
		25: "OPERATION_TYPE_DIVIDEND_TRANSFER",
		26: "OPERATION_TYPE_ACCRUING_VARMARGIN",
		27: "OPERATION_TYPE_WRITING_OFF_VARMARGIN",
		28: "OPERATION_TYPE_DELIVERY_BUY",
		29: "OPERATION_TYPE_DELIVERY_SELL",
		30: "OPERATION_TYPE_TRACK_MFEE",
		31: "OPERATION_TYPE_TRACK_PFEE",
		32: "OPERATION_TYPE_TAX_PROGRESSIVE",
		33: "OPERATION_TYPE_BOND_TAX_PROGRESSIVE",
		34: "OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE",
		35: "OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE",
		36: "OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE",
		37: "OPERATION_TYPE_TAX_REPO_PROGRESSIVE",
		38: "OPERATION_TYPE_TAX_REPO",
		39: "OPERATION_TYPE_TAX_REPO_HOLD",
		40: "OPERATION_TYPE_TAX_REPO_REFUND",
		41: "OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE",
		42: "OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE",
		43: "OPERATION_TYPE_DIV_EXT",
		44: "OPERATION_TYPE_TAX_CORRECTION_COUPON",
	}
	OperationType_value = map[string]int32{
		"OPERATION_TYPE_UNSPECIFIED":                 0,
		"OPERATION_TYPE_INPUT":                       1,
		"OPERATION_TYPE_BOND_TAX":                    2,
		"OPERATION_TYPE_OUTPUT_SECURITIES":           3,
		"OPERATION_TYPE_OVERNIGHT":                   4,
		"OPERATION_TYPE_TAX":                         5,
		"OPERATION_TYPE_BOND_REPAYMENT_FULL":         6,
		"OPERATION_TYPE_SELL_CARD":                   7,
		"OPERATION_TYPE_DIVIDEND_TAX":                8,
		"OPERATION_TYPE_OUTPUT":                      9,
		"OPERATION_TYPE_BOND_REPAYMENT":              10,
		"OPERATION_TYPE_TAX_CORRECTION":              11,
		"OPERATION_TYPE_SERVICE_FEE":                 12,
		"OPERATION_TYPE_BENEFIT_TAX":                 13,
		"OPERATION_TYPE_MARGIN_FEE":                  14,
		"OPERATION_TYPE_BUY":                         15,
		"OPERATION_TYPE_BUY_CARD":                    16,
		"OPERATION_TYPE_INPUT_SECURITIES":            17,
		"OPERATION_TYPE_SELL_MARGIN":                 18,
		"OPERATION_TYPE_BROKER_FEE":                  19,
		"OPERATION_TYPE_BUY_MARGIN":                  20,
		"OPERATION_TYPE_DIVIDEND":                    21,
		"OPERATION_TYPE_SELL":                        22,
		"OPERATION_TYPE_COUPON":                      23,
		"OPERATION_TYPE_SUCCESS_FEE":                 24,
		"OPERATION_TYPE_DIVIDEND_TRANSFER":           25,
		"OPERATION_TYPE_ACCRUING_VARMARGIN":          26,
		"OPERATION_TYPE_WRITING_OFF_VARMARGIN":       27,
		"OPERATION_TYPE_DELIVERY_BUY":                28,
		"OPERATION_TYPE_DELIVERY_SELL":               29,
		"OPERATION_TYPE_TRACK_MFEE":                  30,
		"OPERATION_TYPE_TRACK_PFEE":                  31,
		"OPERATION_TYPE_TAX_PROGRESSIVE":             32,
		"OPERATION_TYPE_BOND_TAX_PROGRESSIVE":        33,
		"OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE":    34,
		"OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE":     35,
		"OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE":  36,
		"OPERATION_TYPE_TAX_REPO_PROGRESSIVE":        37,
		"OPERATION_TYPE_TAX_REPO":                    38,
		"OPERATION_TYPE_TAX_REPO_HOLD":               39,
		"OPERATION_TYPE_TAX_REPO_REFUND":             40,
		"OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE":   41,
		"OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE": 42,
		"OPERATION_TYPE_DIV_EXT":                     43,
		"OPERATION_TYPE_TAX_CORRECTION_COUPON":       44,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_operations_proto_enumTypes[1].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_operations_proto_enumTypes[1]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{1}
}

//Запрос получения списка операций по счёту.
type OperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string               `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                   //Идентификатор счёта клиента.
	From      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                                                              //Начало периода (по UTC).
	To        *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                                                  //Окончание периода (по UTC).
	State     OperationState       `protobuf:"varint,4,opt,name=state,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationState" json:"state,omitempty"` //Статус запрашиваемых операций.
	Figi      string               `protobuf:"bytes,5,opt,name=figi,proto3" json:"figi,omitempty"`                                                              //Figi-идентификатор инструмента для фильтрации.
}

func (x *OperationsRequest) Reset() {
	*x = OperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsRequest) ProtoMessage() {}

func (x *OperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsRequest.ProtoReflect.Descriptor instead.
func (*OperationsRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{0}
}

func (x *OperationsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OperationsRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *OperationsRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *OperationsRequest) GetState() OperationState {
	if x != nil {
		return x.State
	}
	return OperationState_OPERATION_STATE_UNSPECIFIED
}

func (x *OperationsRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

//Список операций.
type OperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"` //Массив операций.
}

func (x *OperationsResponse) Reset() {
	*x = OperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsResponse) ProtoMessage() {}

func (x *OperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsResponse.ProtoReflect.Descriptor instead.
func (*OperationsResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{1}
}

func (x *OperationsResponse) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

//Данные по операции.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                       //Идентификатор операции.
	ParentOperationId string               `protobuf:"bytes,2,opt,name=parent_operation_id,json=parentOperationId,proto3" json:"parent_operation_id,omitempty"`                                              //Идентификатор родительской операции.
	Currency          string               `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                           //Валюта операции.
	Payment           *MoneyValue          `protobuf:"bytes,4,opt,name=payment,proto3" json:"payment,omitempty"`                                                                                             //Сумма операции.
	Price             *MoneyValue          `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`                                                                                                 //Цена операции за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	State             OperationState       `protobuf:"varint,6,opt,name=state,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationState" json:"state,omitempty"`                                      //Статус операции.
	Quantity          int64                `protobuf:"varint,7,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                                          //Количество лотов инструмента.
	QuantityRest      int64                `protobuf:"varint,8,opt,name=quantity_rest,json=quantityRest,proto3" json:"quantity_rest,omitempty"`                                                              //Неисполненный остаток по сделке.
	Figi              string               `protobuf:"bytes,9,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                   //Figi-идентификатор инструмента, связанного с операцией.
	InstrumentType    string               `protobuf:"bytes,10,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                                                        //Тип инструмента. Возможные значения: </br>**bond** — облигация; </br>**share** — акция; </br>**currency** — валюта; </br>**etf** — фонд; </br>**futures** — фьючерс.
	Date              *timestamp.Timestamp `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"`                                                                                                  //Дата и время операции в формате часовом поясе UTC.
	Type              string               `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`                                                                                                  //Текстовое описание типа операции.
	OperationType     OperationType        `protobuf:"varint,13,opt,name=operation_type,json=operationType,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationType" json:"operation_type,omitempty"` //Тип операции.
	Trades            []*OperationTrade    `protobuf:"bytes,14,rep,name=trades,proto3" json:"trades,omitempty"`                                                                                              //Массив сделок.
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{2}
}

func (x *Operation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Operation) GetParentOperationId() string {
	if x != nil {
		return x.ParentOperationId
	}
	return ""
}

func (x *Operation) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Operation) GetPayment() *MoneyValue {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *Operation) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Operation) GetState() OperationState {
	if x != nil {
		return x.State
	}
	return OperationState_OPERATION_STATE_UNSPECIFIED
}

func (x *Operation) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Operation) GetQuantityRest() int64 {
	if x != nil {
		return x.QuantityRest
	}
	return 0
}

func (x *Operation) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Operation) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *Operation) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Operation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Operation) GetOperationType() OperationType {
	if x != nil {
		return x.OperationType
	}
	return OperationType_OPERATION_TYPE_UNSPECIFIED
}

func (x *Operation) GetTrades() []*OperationTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

//Сделка по операции.
type OperationTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId  string               `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`    //Идентификатор сделки.
	DateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"` //Дата и время сделки в часовом поясе UTC.
	Quantity int64                `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                //Количество инструментов.
	Price    *MoneyValue          `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`                       //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
}

func (x *OperationTrade) Reset() {
	*x = OperationTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationTrade) ProtoMessage() {}

func (x *OperationTrade) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationTrade.ProtoReflect.Descriptor instead.
func (*OperationTrade) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{3}
}

func (x *OperationTrade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *OperationTrade) GetDateTime() *timestamp.Timestamp {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *OperationTrade) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OperationTrade) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

//Запрос получения текущего портфеля по счёту.
type PortfolioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта пользователя.
}

func (x *PortfolioRequest) Reset() {
	*x = PortfolioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioRequest) ProtoMessage() {}

func (x *PortfolioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioRequest.ProtoReflect.Descriptor instead.
func (*PortfolioRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{4}
}

func (x *PortfolioRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

//Текущий портфель по счёту.
type PortfolioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAmountShares     *MoneyValue          `protobuf:"bytes,1,opt,name=total_amount_shares,json=totalAmountShares,proto3" json:"total_amount_shares,omitempty"`             //Общая стоимость акций в портфеле в рублях.
	TotalAmountBonds      *MoneyValue          `protobuf:"bytes,2,opt,name=total_amount_bonds,json=totalAmountBonds,proto3" json:"total_amount_bonds,omitempty"`                //Общая стоимость облигаций в портфеле в рублях.
	TotalAmountEtf        *MoneyValue          `protobuf:"bytes,3,opt,name=total_amount_etf,json=totalAmountEtf,proto3" json:"total_amount_etf,omitempty"`                      //Общая стоимость фондов в портфеле в рублях.
	TotalAmountCurrencies *MoneyValue          `protobuf:"bytes,4,opt,name=total_amount_currencies,json=totalAmountCurrencies,proto3" json:"total_amount_currencies,omitempty"` //Общая стоимость валют в портфеле в рублях.
	TotalAmountFutures    *MoneyValue          `protobuf:"bytes,5,opt,name=total_amount_futures,json=totalAmountFutures,proto3" json:"total_amount_futures,omitempty"`          //Общая стоимость фьючерсов в портфеле в рублях.
	ExpectedYield         *Quotation           `protobuf:"bytes,6,opt,name=expected_yield,json=expectedYield,proto3" json:"expected_yield,omitempty"`                           //Текущая относительная доходность портфеля, в %.
	Positions             []*PortfolioPosition `protobuf:"bytes,7,rep,name=positions,proto3" json:"positions,omitempty"`                                                        //Список позиций портфеля.
}

func (x *PortfolioResponse) Reset() {
	*x = PortfolioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioResponse) ProtoMessage() {}

func (x *PortfolioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioResponse.ProtoReflect.Descriptor instead.
func (*PortfolioResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{5}
}

func (x *PortfolioResponse) GetTotalAmountShares() *MoneyValue {
	if x != nil {
		return x.TotalAmountShares
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountBonds() *MoneyValue {
	if x != nil {
		return x.TotalAmountBonds
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountEtf() *MoneyValue {
	if x != nil {
		return x.TotalAmountEtf
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountCurrencies() *MoneyValue {
	if x != nil {
		return x.TotalAmountCurrencies
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountFutures() *MoneyValue {
	if x != nil {
		return x.TotalAmountFutures
	}
	return nil
}

func (x *PortfolioResponse) GetExpectedYield() *Quotation {
	if x != nil {
		return x.ExpectedYield
	}
	return nil
}

func (x *PortfolioResponse) GetPositions() []*PortfolioPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

//Запрос позиций портфеля по счёту.
type PositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта пользователя.
}

func (x *PositionsRequest) Reset() {
	*x = PositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsRequest) ProtoMessage() {}

func (x *PositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsRequest.ProtoReflect.Descriptor instead.
func (*PositionsRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{6}
}

func (x *PositionsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

//Список позиций по счёту.
type PositionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money                   []*MoneyValue          `protobuf:"bytes,1,rep,name=money,proto3" json:"money,omitempty"`                                                                         //Массив валютных позиций портфеля.
	Blocked                 []*MoneyValue          `protobuf:"bytes,2,rep,name=blocked,proto3" json:"blocked,omitempty"`                                                                     //Массив заблокированных валютных позиций портфеля.
	Securities              []*PositionsSecurities `protobuf:"bytes,3,rep,name=securities,proto3" json:"securities,omitempty"`                                                               //Список ценно-бумажных позиций портфеля.
	LimitsLoadingInProgress bool                   `protobuf:"varint,4,opt,name=limits_loading_in_progress,json=limitsLoadingInProgress,proto3" json:"limits_loading_in_progress,omitempty"` //Признак идущей в данный момент выгрузки лимитов.
	Futures                 []*PositionsFutures    `protobuf:"bytes,5,rep,name=futures,proto3" json:"futures,omitempty"`                                                                     //Список фьючерсов портфеля.
}

func (x *PositionsResponse) Reset() {
	*x = PositionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsResponse) ProtoMessage() {}

func (x *PositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsResponse.ProtoReflect.Descriptor instead.
func (*PositionsResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{7}
}

func (x *PositionsResponse) GetMoney() []*MoneyValue {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *PositionsResponse) GetBlocked() []*MoneyValue {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *PositionsResponse) GetSecurities() []*PositionsSecurities {
	if x != nil {
		return x.Securities
	}
	return nil
}

func (x *PositionsResponse) GetLimitsLoadingInProgress() bool {
	if x != nil {
		return x.LimitsLoadingInProgress
	}
	return false
}

func (x *PositionsResponse) GetFutures() []*PositionsFutures {
	if x != nil {
		return x.Futures
	}
	return nil
}

//Запрос доступного для вывода остатка.
type WithdrawLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта пользователя.
}

func (x *WithdrawLimitsRequest) Reset() {
	*x = WithdrawLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawLimitsRequest) ProtoMessage() {}

func (x *WithdrawLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawLimitsRequest.ProtoReflect.Descriptor instead.
func (*WithdrawLimitsRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{8}
}

func (x *WithdrawLimitsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

//Доступный для вывода остаток.
type WithdrawLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money            []*MoneyValue `protobuf:"bytes,1,rep,name=money,proto3" json:"money,omitempty"`                                               //Массив валютных позиций портфеля.
	Blocked          []*MoneyValue `protobuf:"bytes,2,rep,name=blocked,proto3" json:"blocked,omitempty"`                                           //Массив заблокированных валютных позиций портфеля.
	BlockedGuarantee []*MoneyValue `protobuf:"bytes,3,rep,name=blocked_guarantee,json=blockedGuarantee,proto3" json:"blocked_guarantee,omitempty"` //Заблокировано под гарантийное обеспечение фьючерсов.
}

func (x *WithdrawLimitsResponse) Reset() {
	*x = WithdrawLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawLimitsResponse) ProtoMessage() {}

func (x *WithdrawLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawLimitsResponse.ProtoReflect.Descriptor instead.
func (*WithdrawLimitsResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{9}
}

func (x *WithdrawLimitsResponse) GetMoney() []*MoneyValue {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *WithdrawLimitsResponse) GetBlocked() []*MoneyValue {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *WithdrawLimitsResponse) GetBlockedGuarantee() []*MoneyValue {
	if x != nil {
		return x.BlockedGuarantee
	}
	return nil
}

//Позиции портфеля.
type PortfolioPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                     string      `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                             //Figi-идентификатора инструмента.
	InstrumentType           string      `protobuf:"bytes,2,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                                   //Тип инструмента.
	Quantity                 *Quotation  `protobuf:"bytes,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                     //Количество инструмента в портфеле в штуках.
	AveragePositionPrice     *MoneyValue `protobuf:"bytes,4,opt,name=average_position_price,json=averagePositionPrice,proto3" json:"average_position_price,omitempty"`               //Средневзвешенная цена позиции. **Возможна задержка до секунды для пересчёта**.
	ExpectedYield            *Quotation  `protobuf:"bytes,5,opt,name=expected_yield,json=expectedYield,proto3" json:"expected_yield,omitempty"`                                      //Текущая рассчитанная относительная доходность позиции, в %.
	CurrentNkd               *MoneyValue `protobuf:"bytes,6,opt,name=current_nkd,json=currentNkd,proto3" json:"current_nkd,omitempty"`                                               // Текущий НКД.
	AveragePositionPricePt   *Quotation  `protobuf:"bytes,7,opt,name=average_position_price_pt,json=averagePositionPricePt,proto3" json:"average_position_price_pt,omitempty"`       //Средняя цена лота в позиции в пунктах (для фьючерсов). **Возможна задержка до секунды для пересчёта**.
	CurrentPrice             *MoneyValue `protobuf:"bytes,8,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`                                         //Текущая цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента..
	AveragePositionPriceFifo *MoneyValue `protobuf:"bytes,9,opt,name=average_position_price_fifo,json=averagePositionPriceFifo,proto3" json:"average_position_price_fifo,omitempty"` //Средняя цена лота в позиции по методу FIFO. **Возможна задержка до секунды для пересчёта**.
	QuantityLots             *Quotation  `protobuf:"bytes,10,opt,name=quantity_lots,json=quantityLots,proto3" json:"quantity_lots,omitempty"`                                        //Количество лотов в портфеле.
}

func (x *PortfolioPosition) Reset() {
	*x = PortfolioPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioPosition) ProtoMessage() {}

func (x *PortfolioPosition) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioPosition.ProtoReflect.Descriptor instead.
func (*PortfolioPosition) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{10}
}

func (x *PortfolioPosition) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *PortfolioPosition) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *PortfolioPosition) GetQuantity() *Quotation {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *PortfolioPosition) GetAveragePositionPrice() *MoneyValue {
	if x != nil {
		return x.AveragePositionPrice
	}
	return nil
}

func (x *PortfolioPosition) GetExpectedYield() *Quotation {
	if x != nil {
		return x.ExpectedYield
	}
	return nil
}

func (x *PortfolioPosition) GetCurrentNkd() *MoneyValue {
	if x != nil {
		return x.CurrentNkd
	}
	return nil
}

func (x *PortfolioPosition) GetAveragePositionPricePt() *Quotation {
	if x != nil {
		return x.AveragePositionPricePt
	}
	return nil
}

func (x *PortfolioPosition) GetCurrentPrice() *MoneyValue {
	if x != nil {
		return x.CurrentPrice
	}
	return nil
}

func (x *PortfolioPosition) GetAveragePositionPriceFifo() *MoneyValue {
	if x != nil {
		return x.AveragePositionPriceFifo
	}
	return nil
}

func (x *PortfolioPosition) GetQuantityLots() *Quotation {
	if x != nil {
		return x.QuantityLots
	}
	return nil
}

//Баланс позиции ценной бумаги.
type PositionsSecurities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi    string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`        //Figi-идентификатор бумаги.
	Blocked int64  `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"` //Заблокировано.
	Balance int64  `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"` //Текущий незаблокированный баланс.
}

func (x *PositionsSecurities) Reset() {
	*x = PositionsSecurities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsSecurities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsSecurities) ProtoMessage() {}

func (x *PositionsSecurities) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsSecurities.ProtoReflect.Descriptor instead.
func (*PositionsSecurities) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{11}
}

func (x *PositionsSecurities) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *PositionsSecurities) GetBlocked() int64 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

func (x *PositionsSecurities) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

//Баланс фьючерса.
type PositionsFutures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi    string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`        //Figi-идентификатор фьючерса.
	Blocked int64  `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"` //Заблокировано.
	Balance int64  `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"` //Текущий незаблокированный баланс.
}

func (x *PositionsFutures) Reset() {
	*x = PositionsFutures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsFutures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsFutures) ProtoMessage() {}

func (x *PositionsFutures) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsFutures.ProtoReflect.Descriptor instead.
func (*PositionsFutures) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{12}
}

func (x *PositionsFutures) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *PositionsFutures) GetBlocked() int64 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

func (x *PositionsFutures) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type BrokerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*BrokerReportRequest_GenerateBrokerReportRequest
	//	*BrokerReportRequest_GetBrokerReportRequest
	Payload isBrokerReportRequest_Payload `protobuf_oneof:"payload"`
}

func (x *BrokerReportRequest) Reset() {
	*x = BrokerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerReportRequest) ProtoMessage() {}

func (x *BrokerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerReportRequest.ProtoReflect.Descriptor instead.
func (*BrokerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{13}
}

func (m *BrokerReportRequest) GetPayload() isBrokerReportRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *BrokerReportRequest) GetGenerateBrokerReportRequest() *GenerateBrokerReportRequest {
	if x, ok := x.GetPayload().(*BrokerReportRequest_GenerateBrokerReportRequest); ok {
		return x.GenerateBrokerReportRequest
	}
	return nil
}

func (x *BrokerReportRequest) GetGetBrokerReportRequest() *GetBrokerReportRequest {
	if x, ok := x.GetPayload().(*BrokerReportRequest_GetBrokerReportRequest); ok {
		return x.GetBrokerReportRequest
	}
	return nil
}

type isBrokerReportRequest_Payload interface {
	isBrokerReportRequest_Payload()
}

type BrokerReportRequest_GenerateBrokerReportRequest struct {
	GenerateBrokerReportRequest *GenerateBrokerReportRequest `protobuf:"bytes,1,opt,name=generate_broker_report_request,json=generateBrokerReportRequest,proto3,oneof"`
}

type BrokerReportRequest_GetBrokerReportRequest struct {
	GetBrokerReportRequest *GetBrokerReportRequest `protobuf:"bytes,2,opt,name=get_broker_report_request,json=getBrokerReportRequest,proto3,oneof"`
}

func (*BrokerReportRequest_GenerateBrokerReportRequest) isBrokerReportRequest_Payload() {}

func (*BrokerReportRequest_GetBrokerReportRequest) isBrokerReportRequest_Payload() {}

type BrokerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*BrokerReportResponse_GenerateBrokerReportResponse
	//	*BrokerReportResponse_GetBrokerReportResponse
	Payload isBrokerReportResponse_Payload `protobuf_oneof:"payload"`
}

func (x *BrokerReportResponse) Reset() {
	*x = BrokerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerReportResponse) ProtoMessage() {}

func (x *BrokerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerReportResponse.ProtoReflect.Descriptor instead.
func (*BrokerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{14}
}

func (m *BrokerReportResponse) GetPayload() isBrokerReportResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *BrokerReportResponse) GetGenerateBrokerReportResponse() *GenerateBrokerReportResponse {
	if x, ok := x.GetPayload().(*BrokerReportResponse_GenerateBrokerReportResponse); ok {
		return x.GenerateBrokerReportResponse
	}
	return nil
}

func (x *BrokerReportResponse) GetGetBrokerReportResponse() *GetBrokerReportResponse {
	if x, ok := x.GetPayload().(*BrokerReportResponse_GetBrokerReportResponse); ok {
		return x.GetBrokerReportResponse
	}
	return nil
}

type isBrokerReportResponse_Payload interface {
	isBrokerReportResponse_Payload()
}

type BrokerReportResponse_GenerateBrokerReportResponse struct {
	GenerateBrokerReportResponse *GenerateBrokerReportResponse `protobuf:"bytes,1,opt,name=generate_broker_report_response,json=generateBrokerReportResponse,proto3,oneof"`
}

type BrokerReportResponse_GetBrokerReportResponse struct {
	GetBrokerReportResponse *GetBrokerReportResponse `protobuf:"bytes,2,opt,name=get_broker_report_response,json=getBrokerReportResponse,proto3,oneof"`
}

func (*BrokerReportResponse_GenerateBrokerReportResponse) isBrokerReportResponse_Payload() {}

func (*BrokerReportResponse_GetBrokerReportResponse) isBrokerReportResponse_Payload() {}

type GenerateBrokerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string               `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта клиента.
	From      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                            //Начало периода в часовом поясе UTC.
	To        *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                //Окончание периода в часовом поясе UTC.
}

func (x *GenerateBrokerReportRequest) Reset() {
	*x = GenerateBrokerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateBrokerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateBrokerReportRequest) ProtoMessage() {}

func (x *GenerateBrokerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateBrokerReportRequest.ProtoReflect.Descriptor instead.
func (*GenerateBrokerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateBrokerReportRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GenerateBrokerReportRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GenerateBrokerReportRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type GenerateBrokerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` //Идентификатор задачи формирования брокерского отчёта.
}

func (x *GenerateBrokerReportResponse) Reset() {
	*x = GenerateBrokerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateBrokerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateBrokerReportResponse) ProtoMessage() {}

func (x *GenerateBrokerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateBrokerReportResponse.ProtoReflect.Descriptor instead.
func (*GenerateBrokerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{16}
}

func (x *GenerateBrokerReportResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetBrokerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` //Идентификатор задачи формирования брокерского отчёта.
	Page   int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                  //Номер страницы отчета (начинается с 1), значение по умолчанию: 0.
}

func (x *GetBrokerReportRequest) Reset() {
	*x = GetBrokerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrokerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerReportRequest) ProtoMessage() {}

func (x *GetBrokerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerReportRequest.ProtoReflect.Descriptor instead.
func (*GetBrokerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{17}
}

func (x *GetBrokerReportRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetBrokerReportRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetBrokerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerReport []*BrokerReport `protobuf:"bytes,1,rep,name=broker_report,json=brokerReport,proto3" json:"broker_report,omitempty"`
	ItemsCount   int32           `protobuf:"varint,2,opt,name=itemsCount,proto3" json:"itemsCount,omitempty"` //Количество записей в отчете.
	PagesCount   int32           `protobuf:"varint,3,opt,name=pagesCount,proto3" json:"pagesCount,omitempty"` //Количество страниц с данными отчета (начинается с 0).
	Page         int32           `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`             //Текущая страница (начинается с 0).
}

func (x *GetBrokerReportResponse) Reset() {
	*x = GetBrokerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrokerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerReportResponse) ProtoMessage() {}

func (x *GetBrokerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerReportResponse.ProtoReflect.Descriptor instead.
func (*GetBrokerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{18}
}

func (x *GetBrokerReportResponse) GetBrokerReport() []*BrokerReport {
	if x != nil {
		return x.BrokerReport
	}
	return nil
}

func (x *GetBrokerReportResponse) GetItemsCount() int32 {
	if x != nil {
		return x.ItemsCount
	}
	return 0
}

func (x *GetBrokerReportResponse) GetPagesCount() int32 {
	if x != nil {
		return x.PagesCount
	}
	return 0
}

func (x *GetBrokerReportResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type BrokerReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId                    string               `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                                                             //Номер сделки.
	OrderId                    string               `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                             //Номер поручения.
	Figi                       string               `protobuf:"bytes,3,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                  //Figi-идентификатор инструмента.
	ExecuteSign                string               `protobuf:"bytes,4,opt,name=execute_sign,json=executeSign,proto3" json:"execute_sign,omitempty"`                                                 //Признак исполнения.
	TradeDatetime              *timestamp.Timestamp `protobuf:"bytes,5,opt,name=trade_datetime,json=tradeDatetime,proto3" json:"trade_datetime,omitempty"`                                           //Дата и время заключения в часовом поясе UTC.
	Exchange                   string               `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                          //Торговая площадка.
	ClassCode                  string               `protobuf:"bytes,7,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                       //Режим торгов.
	Direction                  string               `protobuf:"bytes,8,opt,name=direction,proto3" json:"direction,omitempty"`                                                                        //Вид сделки.
	Name                       string               `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                                                  //Сокращённое наименование актива.
	Ticker                     string               `protobuf:"bytes,10,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                             //Код актива.
	Price                      *MoneyValue          `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`                                                                               //Цена за единицу.
	Quantity                   int64                `protobuf:"varint,12,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                        //Количество.
	OrderAmount                *MoneyValue          `protobuf:"bytes,13,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`                                                //Сумма (без НКД).
	AciValue                   *Quotation           `protobuf:"bytes,14,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`                                                         //НКД.
	TotalOrderAmount           *MoneyValue          `protobuf:"bytes,15,opt,name=total_order_amount,json=totalOrderAmount,proto3" json:"total_order_amount,omitempty"`                               //Сумма сделки.
	BrokerCommission           *MoneyValue          `protobuf:"bytes,16,opt,name=broker_commission,json=brokerCommission,proto3" json:"broker_commission,omitempty"`                                 //Комиссия брокера.
	ExchangeCommission         *MoneyValue          `protobuf:"bytes,17,opt,name=exchange_commission,json=exchangeCommission,proto3" json:"exchange_commission,omitempty"`                           //Комиссия биржи.
	ExchangeClearingCommission *MoneyValue          `protobuf:"bytes,18,opt,name=exchange_clearing_commission,json=exchangeClearingCommission,proto3" json:"exchange_clearing_commission,omitempty"` //Комиссия клир. центра.
	RepoRate                   *Quotation           `protobuf:"bytes,19,opt,name=repo_rate,json=repoRate,proto3" json:"repo_rate,omitempty"`                                                         //Ставка РЕПО (%).
	Party                      string               `protobuf:"bytes,20,opt,name=party,proto3" json:"party,omitempty"`                                                                               //Контрагент/Брокер.
	ClearValueDate             *timestamp.Timestamp `protobuf:"bytes,21,opt,name=clear_value_date,json=clearValueDate,proto3" json:"clear_value_date,omitempty"`                                     //Дата расчётов в часовом поясе UTC.
	SecValueDate               *timestamp.Timestamp `protobuf:"bytes,22,opt,name=sec_value_date,json=secValueDate,proto3" json:"sec_value_date,omitempty"`                                           //Дата поставки в часовом поясе UTC.
	BrokerStatus               string               `protobuf:"bytes,23,opt,name=broker_status,json=brokerStatus,proto3" json:"broker_status,omitempty"`                                             //Статус брокера.
	SeparateAgreementType      string               `protobuf:"bytes,24,opt,name=separate_agreement_type,json=separateAgreementType,proto3" json:"separate_agreement_type,omitempty"`                //Тип дог.
	SeparateAgreementNumber    string               `protobuf:"bytes,25,opt,name=separate_agreement_number,json=separateAgreementNumber,proto3" json:"separate_agreement_number,omitempty"`          //Номер дог.
	SeparateAgreementDate      string               `protobuf:"bytes,26,opt,name=separate_agreement_date,json=separateAgreementDate,proto3" json:"separate_agreement_date,omitempty"`                //Дата дог.
	DeliveryType               string               `protobuf:"bytes,27,opt,name=delivery_type,json=deliveryType,proto3" json:"delivery_type,omitempty"`                                             //Тип расчёта по сделке.
}

func (x *BrokerReport) Reset() {
	*x = BrokerReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerReport) ProtoMessage() {}

func (x *BrokerReport) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerReport.ProtoReflect.Descriptor instead.
func (*BrokerReport) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{19}
}

func (x *BrokerReport) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *BrokerReport) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *BrokerReport) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *BrokerReport) GetExecuteSign() string {
	if x != nil {
		return x.ExecuteSign
	}
	return ""
}

func (x *BrokerReport) GetTradeDatetime() *timestamp.Timestamp {
	if x != nil {
		return x.TradeDatetime
	}
	return nil
}

func (x *BrokerReport) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *BrokerReport) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *BrokerReport) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *BrokerReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrokerReport) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *BrokerReport) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *BrokerReport) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *BrokerReport) GetOrderAmount() *MoneyValue {
	if x != nil {
		return x.OrderAmount
	}
	return nil
}

func (x *BrokerReport) GetAciValue() *Quotation {
	if x != nil {
		return x.AciValue
	}
	return nil
}

func (x *BrokerReport) GetTotalOrderAmount() *MoneyValue {
	if x != nil {
		return x.TotalOrderAmount
	}
	return nil
}

func (x *BrokerReport) GetBrokerCommission() *MoneyValue {
	if x != nil {
		return x.BrokerCommission
	}
	return nil
}

func (x *BrokerReport) GetExchangeCommission() *MoneyValue {
	if x != nil {
		return x.ExchangeCommission
	}
	return nil
}

func (x *BrokerReport) GetExchangeClearingCommission() *MoneyValue {
	if x != nil {
		return x.ExchangeClearingCommission
	}
	return nil
}

func (x *BrokerReport) GetRepoRate() *Quotation {
	if x != nil {
		return x.RepoRate
	}
	return nil
}

func (x *BrokerReport) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *BrokerReport) GetClearValueDate() *timestamp.Timestamp {
	if x != nil {
		return x.ClearValueDate
	}
	return nil
}

func (x *BrokerReport) GetSecValueDate() *timestamp.Timestamp {
	if x != nil {
		return x.SecValueDate
	}
	return nil
}

func (x *BrokerReport) GetBrokerStatus() string {
	if x != nil {
		return x.BrokerStatus
	}
	return ""
}

func (x *BrokerReport) GetSeparateAgreementType() string {
	if x != nil {
		return x.SeparateAgreementType
	}
	return ""
}

func (x *BrokerReport) GetSeparateAgreementNumber() string {
	if x != nil {
		return x.SeparateAgreementNumber
	}
	return ""
}

func (x *BrokerReport) GetSeparateAgreementDate() string {
	if x != nil {
		return x.SeparateAgreementDate
	}
	return ""
}

func (x *BrokerReport) GetDeliveryType() string {
	if x != nil {
		return x.DeliveryType
	}
	return ""
}

type GetDividendsForeignIssuerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport
	//	*GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport
	Payload isGetDividendsForeignIssuerRequest_Payload `protobuf_oneof:"payload"`
}

func (x *GetDividendsForeignIssuerRequest) Reset() {
	*x = GetDividendsForeignIssuerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsForeignIssuerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsForeignIssuerRequest) ProtoMessage() {}

func (x *GetDividendsForeignIssuerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsForeignIssuerRequest.ProtoReflect.Descriptor instead.
func (*GetDividendsForeignIssuerRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{20}
}

func (m *GetDividendsForeignIssuerRequest) GetPayload() isGetDividendsForeignIssuerRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *GetDividendsForeignIssuerRequest) GetGenerateDivForeignIssuerReport() *GenerateDividendsForeignIssuerReportRequest {
	if x, ok := x.GetPayload().(*GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport); ok {
		return x.GenerateDivForeignIssuerReport
	}
	return nil
}

func (x *GetDividendsForeignIssuerRequest) GetGetDivForeignIssuerReport() *GetDividendsForeignIssuerReportRequest {
	if x, ok := x.GetPayload().(*GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport); ok {
		return x.GetDivForeignIssuerReport
	}
	return nil
}

type isGetDividendsForeignIssuerRequest_Payload interface {
	isGetDividendsForeignIssuerRequest_Payload()
}

type GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport struct {
	GenerateDivForeignIssuerReport *GenerateDividendsForeignIssuerReportRequest `protobuf:"bytes,1,opt,name=generate_div_foreign_issuer_report,json=generateDivForeignIssuerReport,proto3,oneof"` //Объект запроса формирования отчёта.
}

type GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport struct {
	GetDivForeignIssuerReport *GetDividendsForeignIssuerReportRequest `protobuf:"bytes,2,opt,name=get_div_foreign_issuer_report,json=getDivForeignIssuerReport,proto3,oneof"` //Объект запроса сформированного отчёта.
}

func (*GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport) isGetDividendsForeignIssuerRequest_Payload() {
}

func (*GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport) isGetDividendsForeignIssuerRequest_Payload() {
}

type GetDividendsForeignIssuerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse
	//	*GetDividendsForeignIssuerResponse_DivForeignIssuerReport
	Payload isGetDividendsForeignIssuerResponse_Payload `protobuf_oneof:"payload"`
}

func (x *GetDividendsForeignIssuerResponse) Reset() {
	*x = GetDividendsForeignIssuerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsForeignIssuerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsForeignIssuerResponse) ProtoMessage() {}

func (x *GetDividendsForeignIssuerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsForeignIssuerResponse.ProtoReflect.Descriptor instead.
func (*GetDividendsForeignIssuerResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{21}
}

func (m *GetDividendsForeignIssuerResponse) GetPayload() isGetDividendsForeignIssuerResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *GetDividendsForeignIssuerResponse) GetGenerateDivForeignIssuerReportResponse() *GenerateDividendsForeignIssuerReportResponse {
	if x, ok := x.GetPayload().(*GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse); ok {
		return x.GenerateDivForeignIssuerReportResponse
	}
	return nil
}

func (x *GetDividendsForeignIssuerResponse) GetDivForeignIssuerReport() *GetDividendsForeignIssuerReportResponse {
	if x, ok := x.GetPayload().(*GetDividendsForeignIssuerResponse_DivForeignIssuerReport); ok {
		return x.DivForeignIssuerReport
	}
	return nil
}

type isGetDividendsForeignIssuerResponse_Payload interface {
	isGetDividendsForeignIssuerResponse_Payload()
}

type GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse struct {
	GenerateDivForeignIssuerReportResponse *GenerateDividendsForeignIssuerReportResponse `protobuf:"bytes,1,opt,name=generate_div_foreign_issuer_report_response,json=generateDivForeignIssuerReportResponse,proto3,oneof"` //Объект результата задачи запуска формирования отчёта.
}

type GetDividendsForeignIssuerResponse_DivForeignIssuerReport struct {
	DivForeignIssuerReport *GetDividendsForeignIssuerReportResponse `protobuf:"bytes,2,opt,name=div_foreign_issuer_report,json=divForeignIssuerReport,proto3,oneof"` //Отчёт "Справка о доходах за пределами РФ".
}

func (*GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse) isGetDividendsForeignIssuerResponse_Payload() {
}

func (*GetDividendsForeignIssuerResponse_DivForeignIssuerReport) isGetDividendsForeignIssuerResponse_Payload() {
}

//Объект запроса формирования отчёта "Справка о доходах за пределами РФ".
type GenerateDividendsForeignIssuerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string               `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта клиента.
	From      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                            //Начало периода (по UTC).
	To        *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                //Окончание периода (по UTC).
}

func (x *GenerateDividendsForeignIssuerReportRequest) Reset() {
	*x = GenerateDividendsForeignIssuerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDividendsForeignIssuerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDividendsForeignIssuerReportRequest) ProtoMessage() {}

func (x *GenerateDividendsForeignIssuerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDividendsForeignIssuerReportRequest.ProtoReflect.Descriptor instead.
func (*GenerateDividendsForeignIssuerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{22}
}

func (x *GenerateDividendsForeignIssuerReportRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GenerateDividendsForeignIssuerReportRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GenerateDividendsForeignIssuerReportRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// Объект запроса сформированного отчёта "Справка о доходах за пределами РФ".
type GetDividendsForeignIssuerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` //Идентификатор задачи формирования отчёта.
	Page   int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                  //Номер страницы отчета (начинается с 0), значение по умолчанию: 0.
}

func (x *GetDividendsForeignIssuerReportRequest) Reset() {
	*x = GetDividendsForeignIssuerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsForeignIssuerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsForeignIssuerReportRequest) ProtoMessage() {}

func (x *GetDividendsForeignIssuerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsForeignIssuerReportRequest.ProtoReflect.Descriptor instead.
func (*GetDividendsForeignIssuerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{23}
}

func (x *GetDividendsForeignIssuerReportRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetDividendsForeignIssuerReportRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// Объект результата задачи запуска формирования отчёта "Справка о доходах за пределами РФ".
type GenerateDividendsForeignIssuerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` //Идентификатор задачи формирования отчёта.
}

func (x *GenerateDividendsForeignIssuerReportResponse) Reset() {
	*x = GenerateDividendsForeignIssuerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDividendsForeignIssuerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDividendsForeignIssuerReportResponse) ProtoMessage() {}

func (x *GenerateDividendsForeignIssuerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDividendsForeignIssuerReportResponse.ProtoReflect.Descriptor instead.
func (*GenerateDividendsForeignIssuerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{24}
}

func (x *GenerateDividendsForeignIssuerReportResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetDividendsForeignIssuerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DividendsForeignIssuerReport []*DividendsForeignIssuerReport `protobuf:"bytes,1,rep,name=dividends_foreign_issuer_report,json=dividendsForeignIssuerReport,proto3" json:"dividends_foreign_issuer_report,omitempty"`
	ItemsCount                   int32                           `protobuf:"varint,2,opt,name=itemsCount,proto3" json:"itemsCount,omitempty"` //Количество записей в отчете.
	PagesCount                   int32                           `protobuf:"varint,3,opt,name=pagesCount,proto3" json:"pagesCount,omitempty"` //Количество страниц с данными отчета (начинается с 0).
	Page                         int32                           `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`             //Текущая страница (начинается с 0).
}

func (x *GetDividendsForeignIssuerReportResponse) Reset() {
	*x = GetDividendsForeignIssuerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsForeignIssuerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsForeignIssuerReportResponse) ProtoMessage() {}

func (x *GetDividendsForeignIssuerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsForeignIssuerReportResponse.ProtoReflect.Descriptor instead.
func (*GetDividendsForeignIssuerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{25}
}

func (x *GetDividendsForeignIssuerReportResponse) GetDividendsForeignIssuerReport() []*DividendsForeignIssuerReport {
	if x != nil {
		return x.DividendsForeignIssuerReport
	}
	return nil
}

func (x *GetDividendsForeignIssuerReportResponse) GetItemsCount() int32 {
	if x != nil {
		return x.ItemsCount
	}
	return 0
}

func (x *GetDividendsForeignIssuerReportResponse) GetPagesCount() int32 {
	if x != nil {
		return x.PagesCount
	}
	return 0
}

func (x *GetDividendsForeignIssuerReportResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// Отчёт "Справка о доходах за пределами РФ".
type DividendsForeignIssuerReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordDate         *timestamp.Timestamp `protobuf:"bytes,1,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`                         //Дата фиксации реестра.
	PaymentDate        *timestamp.Timestamp `protobuf:"bytes,2,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`                      //Дата выплаты.
	SecurityName       string               `protobuf:"bytes,3,opt,name=security_name,json=securityName,proto3" json:"security_name,omitempty"`                   //Наименование ценной бумаги.
	Isin               string               `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                       //ISIN-идентификатор ценной бумаги.
	IssuerCountry      string               `protobuf:"bytes,5,opt,name=issuer_country,json=issuerCountry,proto3" json:"issuer_country,omitempty"`                //Страна эмитента. Для депозитарных расписок указывается страна эмитента базового актива.
	Quantity           int64                `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`                                              //Количество ценных бумаг.
	Dividend           *Quotation           `protobuf:"bytes,7,opt,name=dividend,proto3" json:"dividend,omitempty"`                                               //Выплаты на одну бумагу
	ExternalCommission *Quotation           `protobuf:"bytes,8,opt,name=external_commission,json=externalCommission,proto3" json:"external_commission,omitempty"` //Комиссия внешних платёжных агентов.
	DividendGross      *Quotation           `protobuf:"bytes,9,opt,name=dividend_gross,json=dividendGross,proto3" json:"dividend_gross,omitempty"`                //Сумма до удержания налога.
	Tax                *Quotation           `protobuf:"bytes,10,opt,name=tax,proto3" json:"tax,omitempty"`                                                        //Сумма налога, удержанного агентом.
	DividendAmount     *Quotation           `protobuf:"bytes,11,opt,name=dividend_amount,json=dividendAmount,proto3" json:"dividend_amount,omitempty"`            //Итоговая сумма выплаты.
	Currency           string               `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`                                              //Валюта.
}

func (x *DividendsForeignIssuerReport) Reset() {
	*x = DividendsForeignIssuerReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DividendsForeignIssuerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DividendsForeignIssuerReport) ProtoMessage() {}

func (x *DividendsForeignIssuerReport) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DividendsForeignIssuerReport.ProtoReflect.Descriptor instead.
func (*DividendsForeignIssuerReport) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{26}
}

func (x *DividendsForeignIssuerReport) GetRecordDate() *timestamp.Timestamp {
	if x != nil {
		return x.RecordDate
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetPaymentDate() *timestamp.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

func (x *DividendsForeignIssuerReport) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *DividendsForeignIssuerReport) GetIssuerCountry() string {
	if x != nil {
		return x.IssuerCountry
	}
	return ""
}

func (x *DividendsForeignIssuerReport) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *DividendsForeignIssuerReport) GetDividend() *Quotation {
	if x != nil {
		return x.Dividend
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetExternalCommission() *Quotation {
	if x != nil {
		return x.ExternalCommission
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetDividendGross() *Quotation {
	if x != nil {
		return x.DividendGross
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetTax() *Quotation {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetDividendAmount() *Quotation {
	if x != nil {
		return x.DividendAmount
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

var File_operations_proto protoreflect.FileDescriptor

var file_operations_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x25, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x11, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x22, 0x66, 0x0a, 0x12, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xb8, 0x05, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xc9, 0x01,
	0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x47, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x31, 0x0a, 0x10, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb5, 0x05, 0x0a,
	0x11, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x74, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x74, 0x66, 0x12, 0x69, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x63,
	0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x56, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x31, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x95, 0x03, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x1a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x07,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x07, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0x36, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x47,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x22, 0xc2, 0x06, 0x0a, 0x11, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x67, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x16, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6b, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6b, 0x64, 0x12,
	0x6b, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x74, 0x12, 0x56, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66,
	0x69, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x74, 0x73, 0x22, 0x5d, 0x0a,
	0x13, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5a, 0x0a, 0x10,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x13, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x89, 0x01, 0x0a, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x19,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x16, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x14, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a,
	0x1f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1a, 0x67,
	0x65, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f,
	0x22, 0x37, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0xc7, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xca, 0x0b, 0x0a, 0x0c, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x61,
	0x63, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x61, 0x63, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x11, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x13, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x73, 0x0a, 0x1c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x19, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa0, 0x01, 0x0a,
	0x22, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x76, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x91, 0x01, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x76, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x67, 0x65, 0x74, 0x44, 0x69, 0x76,
	0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xf1,
	0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x2b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x69, 0x76, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x26, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x76, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x19, 0x64, 0x69,
	0x76, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x16, 0x64, 0x69, 0x76, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x55, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x2c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x8a, 0x02,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1f, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xdb, 0x05, 0x0a, 0x1c, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x12, 0x61, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x12, 0x42, 0x0a,
	0x03, 0x74, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x61,
	0x78, 0x12, 0x59, 0x0a, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2a, 0x6d, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x8f, 0x0c, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x58, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x49, 0x45, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x41,
	0x58, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x09, 0x12, 0x21,
	0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46,
	0x45, 0x45, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x5f, 0x54,
	0x41, 0x58, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x45,
	0x45, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55,
	0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x11, 0x12, 0x1e, 0x0a,
	0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x12, 0x12, 0x1d, 0x0a,
	0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x55, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10,
	0x16, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x19, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x52, 0x55, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41,
	0x52, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x1a, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x56, 0x41, 0x52, 0x4d, 0x41, 0x52, 0x47, 0x49,
	0x4e, 0x10, 0x1b, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x42,
	0x55, 0x59, 0x10, 0x1c, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x10, 0x1d, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x4d,
	0x46, 0x45, 0x45, 0x10, 0x1e, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x46,
	0x45, 0x45, 0x10, 0x1f, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x20, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10,
	0x21, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x58,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x22, 0x12, 0x2a,
	0x0a, 0x26, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x23, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x24, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45,
	0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x10, 0x26, 0x12,
	0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x27, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x4e, 0x44, 0x10, 0x28, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56,
	0x45, 0x10, 0x29, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56,
	0x45, 0x10, 0x2a, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x5f, 0x45, 0x58, 0x54, 0x10, 0x2b, 0x12,
	0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x10, 0x2c, 0x32, 0xf3, 0x06, 0x0a, 0x11, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xae,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x47, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x60, 0x0a, 0x1c, 0x72, 0x75, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x69,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x50,
	0x01, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x70, 0x62, 0xa2, 0x02,
	0x05, 0x54, 0x49, 0x41, 0x50, 0x49, 0xaa, 0x02, 0x14, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11,
	0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x5c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5c, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_operations_proto_rawDescOnce sync.Once
	file_operations_proto_rawDescData = file_operations_proto_rawDesc
)

func file_operations_proto_rawDescGZIP() []byte {
	file_operations_proto_rawDescOnce.Do(func() {
		file_operations_proto_rawDescData = protoimpl.X.CompressGZIP(file_operations_proto_rawDescData)
	})
	return file_operations_proto_rawDescData
}

var file_operations_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_operations_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_operations_proto_goTypes = []interface{}{
	(OperationState)(0),                                  // 0: tinkoff.public.invest.api.contract.v1.OperationState
	(OperationType)(0),                                   // 1: tinkoff.public.invest.api.contract.v1.OperationType
	(*OperationsRequest)(nil),                            // 2: tinkoff.public.invest.api.contract.v1.OperationsRequest
	(*OperationsResponse)(nil),                           // 3: tinkoff.public.invest.api.contract.v1.OperationsResponse
	(*Operation)(nil),                                    // 4: tinkoff.public.invest.api.contract.v1.Operation
	(*OperationTrade)(nil),                               // 5: tinkoff.public.invest.api.contract.v1.OperationTrade
	(*PortfolioRequest)(nil),                             // 6: tinkoff.public.invest.api.contract.v1.PortfolioRequest
	(*PortfolioResponse)(nil),                            // 7: tinkoff.public.invest.api.contract.v1.PortfolioResponse
	(*PositionsRequest)(nil),                             // 8: tinkoff.public.invest.api.contract.v1.PositionsRequest
	(*PositionsResponse)(nil),                            // 9: tinkoff.public.invest.api.contract.v1.PositionsResponse
	(*WithdrawLimitsRequest)(nil),                        // 10: tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest
	(*WithdrawLimitsResponse)(nil),                       // 11: tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse
	(*PortfolioPosition)(nil),                            // 12: tinkoff.public.invest.api.contract.v1.PortfolioPosition
	(*PositionsSecurities)(nil),                          // 13: tinkoff.public.invest.api.contract.v1.PositionsSecurities
	(*PositionsFutures)(nil),                             // 14: tinkoff.public.invest.api.contract.v1.PositionsFutures
	(*BrokerReportRequest)(nil),                          // 15: tinkoff.public.invest.api.contract.v1.BrokerReportRequest
	(*BrokerReportResponse)(nil),                         // 16: tinkoff.public.invest.api.contract.v1.BrokerReportResponse
	(*GenerateBrokerReportRequest)(nil),                  // 17: tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest
	(*GenerateBrokerReportResponse)(nil),                 // 18: tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse
	(*GetBrokerReportRequest)(nil),                       // 19: tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest
	(*GetBrokerReportResponse)(nil),                      // 20: tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse
	(*BrokerReport)(nil),                                 // 21: tinkoff.public.invest.api.contract.v1.BrokerReport
	(*GetDividendsForeignIssuerRequest)(nil),             // 22: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest
	(*GetDividendsForeignIssuerResponse)(nil),            // 23: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse
	(*GenerateDividendsForeignIssuerReportRequest)(nil),  // 24: tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest
	(*GetDividendsForeignIssuerReportRequest)(nil),       // 25: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest
	(*GenerateDividendsForeignIssuerReportResponse)(nil), // 26: tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse
	(*GetDividendsForeignIssuerReportResponse)(nil),      // 27: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse
	(*DividendsForeignIssuerReport)(nil),                 // 28: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport
	(*timestamp.Timestamp)(nil),                          // 29: google.protobuf.Timestamp
	(*MoneyValue)(nil),                                   // 30: tinkoff.public.invest.api.contract.v1.MoneyValue
	(*Quotation)(nil),                                    // 31: tinkoff.public.invest.api.contract.v1.Quotation
}
var file_operations_proto_depIdxs = []int32{
	29, // 0: tinkoff.public.invest.api.contract.v1.OperationsRequest.from:type_name -> google.protobuf.Timestamp
	29, // 1: tinkoff.public.invest.api.contract.v1.OperationsRequest.to:type_name -> google.protobuf.Timestamp
	0,  // 2: tinkoff.public.invest.api.contract.v1.OperationsRequest.state:type_name -> tinkoff.public.invest.api.contract.v1.OperationState
	4,  // 3: tinkoff.public.invest.api.contract.v1.OperationsResponse.operations:type_name -> tinkoff.public.invest.api.contract.v1.Operation
	30, // 4: tinkoff.public.invest.api.contract.v1.Operation.payment:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 5: tinkoff.public.invest.api.contract.v1.Operation.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	0,  // 6: tinkoff.public.invest.api.contract.v1.Operation.state:type_name -> tinkoff.public.invest.api.contract.v1.OperationState
	29, // 7: tinkoff.public.invest.api.contract.v1.Operation.date:type_name -> google.protobuf.Timestamp
	1,  // 8: tinkoff.public.invest.api.contract.v1.Operation.operation_type:type_name -> tinkoff.public.invest.api.contract.v1.OperationType
	5,  // 9: tinkoff.public.invest.api.contract.v1.Operation.trades:type_name -> tinkoff.public.invest.api.contract.v1.OperationTrade
	29, // 10: tinkoff.public.invest.api.contract.v1.OperationTrade.date_time:type_name -> google.protobuf.Timestamp
	30, // 11: tinkoff.public.invest.api.contract.v1.OperationTrade.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 12: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_shares:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 13: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_bonds:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 14: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_etf:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 15: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_currencies:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 16: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_futures:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	31, // 17: tinkoff.public.invest.api.contract.v1.PortfolioResponse.expected_yield:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	12, // 18: tinkoff.public.invest.api.contract.v1.PortfolioResponse.positions:type_name -> tinkoff.public.invest.api.contract.v1.PortfolioPosition
	30, // 19: tinkoff.public.invest.api.contract.v1.PositionsResponse.money:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 20: tinkoff.public.invest.api.contract.v1.PositionsResponse.blocked:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	13, // 21: tinkoff.public.invest.api.contract.v1.PositionsResponse.securities:type_name -> tinkoff.public.invest.api.contract.v1.PositionsSecurities
	14, // 22: tinkoff.public.invest.api.contract.v1.PositionsResponse.futures:type_name -> tinkoff.public.invest.api.contract.v1.PositionsFutures
	30, // 23: tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.money:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 24: tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 25: tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	31, // 26: tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	30, // 27: tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	31, // 28: tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	30, // 29: tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_nkd:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	31, // 30: tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_pt:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	30, // 31: tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 32: tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	31, // 33: tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity_lots:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	17, // 34: tinkoff.public.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request:type_name -> tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest
	19, // 35: tinkoff.public.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request:type_name -> tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest
	18, // 36: tinkoff.public.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response:type_name -> tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse
	20, // 37: tinkoff.public.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response:type_name -> tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse
	29, // 38: tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.from:type_name -> google.protobuf.Timestamp
	29, // 39: tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.to:type_name -> google.protobuf.Timestamp
	21, // 40: tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.broker_report:type_name -> tinkoff.public.invest.api.contract.v1.BrokerReport
	29, // 41: tinkoff.public.invest.api.contract.v1.BrokerReport.trade_datetime:type_name -> google.protobuf.Timestamp
	30, // 42: tinkoff.public.invest.api.contract.v1.BrokerReport.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 43: tinkoff.public.invest.api.contract.v1.BrokerReport.order_amount:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	31, // 44: tinkoff.public.invest.api.contract.v1.BrokerReport.aci_value:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	30, // 45: tinkoff.public.invest.api.contract.v1.BrokerReport.total_order_amount:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 46: tinkoff.public.invest.api.contract.v1.BrokerReport.broker_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 47: tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 48: tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_clearing_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	31, // 49: tinkoff.public.invest.api.contract.v1.BrokerReport.repo_rate:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	29, // 50: tinkoff.public.invest.api.contract.v1.BrokerReport.clear_value_date:type_name -> google.protobuf.Timestamp
	29, // 51: tinkoff.public.invest.api.contract.v1.BrokerReport.sec_value_date:type_name -> google.protobuf.Timestamp
	24, // 52: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report:type_name -> tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest
	25, // 53: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report:type_name -> tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest
	26, // 54: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response:type_name -> tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse
	27, // 55: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report:type_name -> tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse
	29, // 56: tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from:type_name -> google.protobuf.Timestamp
	29, // 57: tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to:type_name -> google.protobuf.Timestamp
	28, // 58: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report:type_name -> tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport
	29, // 59: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.record_date:type_name -> google.protobuf.Timestamp
	29, // 60: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date:type_name -> google.protobuf.Timestamp
	31, // 61: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	31, // 62: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	31, // 63: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	31, // 64: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.tax:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	31, // 65: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	2,  // 66: tinkoff.public.invest.api.contract.v1.OperationsService.GetOperations:input_type -> tinkoff.public.invest.api.contract.v1.OperationsRequest
	6,  // 67: tinkoff.public.invest.api.contract.v1.OperationsService.GetPortfolio:input_type -> tinkoff.public.invest.api.contract.v1.PortfolioRequest
	8,  // 68: tinkoff.public.invest.api.contract.v1.OperationsService.GetPositions:input_type -> tinkoff.public.invest.api.contract.v1.PositionsRequest
	10, // 69: tinkoff.public.invest.api.contract.v1.OperationsService.GetWithdrawLimits:input_type -> tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest
	15, // 70: tinkoff.public.invest.api.contract.v1.OperationsService.GetBrokerReport:input_type -> tinkoff.public.invest.api.contract.v1.BrokerReportRequest
	22, // 71: tinkoff.public.invest.api.contract.v1.OperationsService.GetDividendsForeignIssuer:input_type -> tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest
	3,  // 72: tinkoff.public.invest.api.contract.v1.OperationsService.GetOperations:output_type -> tinkoff.public.invest.api.contract.v1.OperationsResponse
	7,  // 73: tinkoff.public.invest.api.contract.v1.OperationsService.GetPortfolio:output_type -> tinkoff.public.invest.api.contract.v1.PortfolioResponse
	9,  // 74: tinkoff.public.invest.api.contract.v1.OperationsService.GetPositions:output_type -> tinkoff.public.invest.api.contract.v1.PositionsResponse
	11, // 75: tinkoff.public.invest.api.contract.v1.OperationsService.GetWithdrawLimits:output_type -> tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse
	16, // 76: tinkoff.public.invest.api.contract.v1.OperationsService.GetBrokerReport:output_type -> tinkoff.public.invest.api.contract.v1.BrokerReportResponse
	23, // 77: tinkoff.public.invest.api.contract.v1.OperationsService.GetDividendsForeignIssuer:output_type -> tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse
	72, // [72:78] is the sub-list for method output_type
	66, // [66:72] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_operations_proto_init() }
func file_operations_proto_init() {
	if File_operations_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_operations_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsSecurities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsFutures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateBrokerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateBrokerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrokerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrokerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsForeignIssuerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsForeignIssuerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDividendsForeignIssuerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsForeignIssuerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDividendsForeignIssuerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsForeignIssuerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DividendsForeignIssuerReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_operations_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*BrokerReportRequest_GenerateBrokerReportRequest)(nil),
		(*BrokerReportRequest_GetBrokerReportRequest)(nil),
	}
	file_operations_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*BrokerReportResponse_GenerateBrokerReportResponse)(nil),
		(*BrokerReportResponse_GetBrokerReportResponse)(nil),
	}
	file_operations_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport)(nil),
		(*GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport)(nil),
	}
	file_operations_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse)(nil),
		(*GetDividendsForeignIssuerResponse_DivForeignIssuerReport)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_operations_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_operations_proto_goTypes,
		DependencyIndexes: file_operations_proto_depIdxs,
		EnumInfos:         file_operations_proto_enumTypes,
		MessageInfos:      file_operations_proto_msgTypes,
	}.Build()
	File_operations_proto = out.File
	file_operations_proto_rawDesc = nil
	file_operations_proto_goTypes = nil
	file_operations_proto_depIdxs = nil
}
